---
layout: handbook-page-toc
title: 'Release Group Planning'
description: 'How the Release Team Operates'
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

### Our Approach

We work in a continuous Kanban manner while still aligning with Milestones. Epics and issues have the following lifecycle:

```mermaid
graph LR;
  Plan --> Schedule;
  Schedule --> Build;
  Build --> Release;
  Release --> Post-Release;
```

We use the following boards to monitor this process:

#### Planning Board

- [Release : Plan](https://gitlab.com/groups/gitlab-org/-/boards/1489550)

#### Scheduling Board

- [Release : Schedule](https://gitlab.com/groups/gitlab-org/-/boards/1488068?&label_name[]=group%3A%3Arelease)

#### Build Board

- [Release : Build](https://gitlab.com/groups/gitlab-org/-/boards/1489558) (requires filtering by milestone)

### Our Process

We use the [Planning Board](#planning-board) to triage issues that are not yet planned for a milestone. The Product Manager (PM) owns this board and uses it to advance issues through to becoming feasible Epics. When work leaves this board, it is in a fit state for the engineering team to implement the issue.

In this stage, the PM establishes new work that they would like to see in the Release features. The _devops::release_ process follows the [Product Development Flow](/handbook/product-development-flow/#validation-track), as follows:

#### Problem validation

The PM tries to establish that the issue describes a problem with the Release feature that is customer-relevant (internal and external),
or has some other clear merit (e.g. a technical improvement in the backend). The PM will draw on other group members, customers and the UX organization where necessary.
If the problem is validated, the issue is moved forward to the next stage, otherwise it is closed with a short explanation on _why_ the problem will not be considered. This explanation should also contain a link [to the category strategy](/handbook/product/product-processes/#category-direction).

#### Solution validation

Once the problem is validated:
1. PM considers creating an Epic if [the scope of the solution is large enough](/handbook/product/product-processes/#epics-for-a-single-iteration)
1. PM reaches out to the Engineering Manager (EM) for a technical contact in the team.
1. The EM assigns [ownership](#epic-ownership) to an engineer.
1. The engineer will work with the PM to determine a technical solution for the problem and create all issues required to build the solution.

If designs are required:
1. PM will add the `workflow::ready for design` label and collaborate with UX to validate the solution or create the user stories required to solve the customer problem.
1. PM will add Release priority labels (`Release::P*`) to guide the prioritization of issues in the `~workflow::ready for design` queue.
1. UX will apply the `workflow::design` label for issues that are actively being worked on.
1. Once PM, UX and the development team have discussed the solution and decided the issue is ready, they will move the issue to `workflow::planning breakdown`. This label will signal that the issue is ready to move into [the Build phase](/handbook/product-development-flow/#build-phase-1-plan).

#### Planning Breakdown

During planning breakdown, the correct labels should be applied. The required labels that need to be applied for each issue:

- `group::release`
- `category`
- `feature` or `bug`
- `frontend`, `backend` or both
- `needs weight`

This signifies that from both a product and engineering point of view, this issue is prepared and ready for weighting and scheduling.

##### Needs Weight/Refinement Issue

In order to make sure sprints are effective as possible, it is important to ensure issues are clearly defined and broken down ahead of a new sprint.
A **Needs Weight/Refinement** issue will be created every milestone for issues that require additional refinement by the team. Small changes and bug fixes typically wonâ€™t require this analysis.
Engineers will look for assigned issues with the `workflow::planning breakdown` label that have user stories defined, as well as functional, performance, documentation, and security acceptance criteria.
See [Build phase](/handbook/product-development-flow/#build-phase-1-plan) of the Product Development Workflow for more details.
Assigned engineers will work with Product, UX and other engineers to determine the implementation plan for the feature. ***Tip:** When you're having hard time to estimate MR count, [consider a PoC step](/handbook/engineering/development/ops/release/poc.html).*

Once the refinement is done, the following steps should be taken:

* The issue should be moved forward in the workflow to `workflow::ready for development`.
* The `needs weight` label should be removed.
* Those updates to the issue will signal that the issue has been properly scoped and is ready to be worked on in an upcoming milestone.

##### Weights

As a byproduct of the engineering evaluation process, a rough estimate of the number of merge requests required to develop a
feature will be produced. This measure can be used as a way to determine issue weights. These weights can be useful during the
planning process to get a rough gauge of how many features can be worked on in a milestone, and to understand how much work the
team can do in a milestone. This metric also aligns with the [merge request rate metric](/handbook/engineering/metrics/) currently measured by engineering teams.

Every milestone a ["Needs Weight/Refinement"](https://gitlab.com/gitlab-org/ci-cd/release-group/release/-/blob/master/.gitlab/issue_templates/needs%20weight.md) issue is created by the PM. The PM will work together with the EM to assign issues for weighting to each engineer on the team. These are issues that will likely be scheduled in the following 1+ milestones. During the first week of each milestone, the engineers will be responsible for weighing their assigned issues. 

After a weight has been entered, the engineer should remove the `needs weight` label, and add the `workflow::ready for development` label. This signals that the issue is ready to be scheduled in a future milestone.

Occasionally, a proof-of-concept (POC) is necessary to determine a feasible technical path. When one is required, the engineer
will create a POC issue that contains the context of the research to be conducted along with the goals of the POC. This
issue will be scheduled for work before any further breakdown of tasks is performed. Once the technical path is clear, the engineer can proceed to weight the issue and/or break down the issue further to guide implementation.

Not all POCs will be successful, and that is OK! Some avenues of research may not be successful, and the POC will have saved us from investing significant time in a solution that will not meet our needs. The goal is early feedback and fast iteration.

#### Schedule

We use the [Scheduling boards](#scheduling-board) for this phase. Each milestone, the PM will create [a planning issue](https://gitlab.com/gitlab-org/ci-cd/release-group/release/-/blob/master/.gitlab/issue_templates/Internal%20Milestone.md).

Once per week the PM, EM and Product Designer will meet to discuss the work that is currently in queue and prepare items for development. Ideally, the outcome of these meetings should be a rough plan of the next three milestones. While this is a collaborative process, the PM is the DRI for determining priority and grouping by priority labels to indicate product priorities: 

- `Release::P1`, which is the current milestone's top focus and we strive to deliver ***all*** of these issues
- `Release::P2`, is the next highest priority for the milestone we strive to deliver ***most*** of these issues.
- `Release::P3`, often considered strech goals, these issues are the lowest priority for the milestone and we strive to deliver ***some*** of these issues.

When the planning issue has been drafted, the entire team is then invited to review the milestone plan and give feedback asynchronously. Once finalized, the EM will ensure all items have been assigned the appropriate milestone, which will pull items into the Build board. The `Deliverable` label will be applied by the EM as a signal of which items can be confidently delivered based on team capacity. As a general rule, we plan ambitiously so delivering 70% or more of our deliverables is considered a success.

When the planning issue is finalized and before the milstone starts, the PM will add the appropriate `release post item` label to any features that will be added to the [GitLab Release Post](https://about.gitlab.com/handbook/marketing/blog/release-posts/#:~:text=Release%20posts%20are%20blog%20posts,patch%2Fsecurity%20releases%20whenever%20necessary). This will ensure that blog post entries are auto-generated, reviewed and ready to merge as soon as a feature makes it into the release.

#### Build

We use the [Build boards](#build-board) to look at issues in the current milestone labeled with `group::release`.

The Engineering Manager (EM) owns this board and uses it to facilitate building out the Epics and issues that the team have decided are ready for development.

The EM reviews the board each milestone to ensure that it accurately reflects the plan defined in the planning issue, and that issues in the "ready for development" column are labeled with the appropriate `Release::P*` label. When an engineer is open, they can pick unassigned issues in order of priority.

When picking up an issue, please:

1. Assign yourself
2. Progress the issue through the board using th appropriate labels
3. Link the associated Feature Flag issue (if applicable)
4. Add asynchronous updates in a single comment thread on the issue

As their work progresses, they advance the issue through the "in dev" and "in review" columns. Engineers need to keep the issues aligned with the status of the corresponding merge requests.

Once the MR has been merged, the engineer will move the issue into `workflow::verification` until they have verified that the MR has been deployed to production. If the issue has been successfully deployed to production and the associated Feature Flag has been rolled out, then the issue can be closed and `workflow::complete` should be applied.

### Epic Ownership

The Release team uses epics to describe features or capabilities that will increase the maturity of the Release categories over time.

Each epic should be owned by an engineer who is responsible for all technical aspects of that epic. The engineering DRI will work closely with the Product Manager and Product Designer to understand the requirements and create issues that encapsulate the technical work required during the [design](/handbook/product-development-flow/#validation-phase-3-design)/[solution validation](/handbook/product-development-flow/#validation-phase-4-solution-validation) phases and [build](/handbook/product-development-flow/#build-track) track of the [Product Development Flow](/handbook/product-development-flow/). Each issue needs to be weighted and contain enough information in the description area for any other engineer on the team to be able to pick up that work.

**For the duration of building the epic**, the engineer does not need to be the only person implementing the issues. They should keep watch of the work that is done on the issues so that they can verify that the work is progressing correctly. If there are problems with the work, or lengthy delays,
they need to make sure the Product Manager and Engineering Manager are aware.

**When work is nearing completion**, the engineer should make sure that any additional issues that may have come up during the build process are either
addressed, or scheduled for work. Additional issues should be created and added to the epic. This will help to make sure that we do not build up technical debt while building.

**Finally**, they should also monitor any work that needs to occur while rolling out the Epic in production. If there are
rake tasks, database migrations, or other tasks that need to be run, they need to see those through to being
run on the production systems with the help of the Site Reliability counterpart.

This places a lot of responsibility with the DRI, but the PM and EM are always there to support them. This ownerships
removes bottlenecks and situations where only the PM or EM is able to advance an idea. In addition, the best people
to decide on how to implement an issue are often the people who will actually perform the work.

### Issue Breakdown

Sometimes an issue can be large and require multiple merge requests to resolve. In this case, it can help to create smaller, more narrowly defined issues that can be resolved with a single merge request.
Resolving these smaller implementation issues contributes to the completion of the larger parent issue. This has several benefits:

1. It keeps the conversations around each specific merge request within its own issue.
1. It makes it easier to see the progress of each merge request that contributes to the larger issue.
1. It promotes iteration and smaller merge requests.

For example, if an issue requires one frontend, one backend, and one database change, it can help to create three "sub-issues" that link back to the main issue.

To ensure the sequence for completion of the implementation issues is easy to track, we should utilize [`Blocks` and `Is blocked by` options](https://about.gitlab.com/handbook/marketing/project-management-guidelines/issues/#related-issues-and-blocking-issues) on each issue page.

![Related issues](/handbook/engineering/development/ops/release/planning/related-issues.png)

##### Addressing new issues quickly

When new issues arise (through testing, customer support issues, or other means) we still want to be able to address them
quickly without being delayed by process.
If you think a new issue needs to be worked on immediately:

1. Make sure there is enough detail on the ticket for someone else to understand the issue and for someone else to have
   enough context to review your work
1. Make sure there is a weight
1. Assign it into the current milestone
1. Add the `workflow::in dev` label and the `stuff that should just work` label
1. Assign it to yourself

##### What work should I pick up next?

"Pull from the right". That means, start at the right hand side of the build board, and move towards the left.

In order, that means:

- Can you help anyone with reviews?
- Can you unblock anyone in development?
- Pick from the "ready for development" column using the "Release::P*" labels on the [Build boards](#build-board).
