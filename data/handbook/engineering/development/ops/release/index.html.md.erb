---
layout: handbook-page-toc
title: "Release Group"
description: "The Release Group is responsible for developing features that relate to the Release stage of the DevOps lifecycle."
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## Mission

The Release Group is responsible for developing features that relate to the [Release stage](/handbook/product/categories/#release-stage) of the DevOps lifecycle. The Release Stage is focused on all the functionality with respect to
Continuous Delivery and Release Automation.

For an understanding of what this stage encapsulates, take a look at [the product
vision](/direction/delivery/).

For an understanding of our UX Vision and Strategy, take a look at the [Release UX Strategy](/handbook/product/ux/stage-group-ux-strategy/release/) or the [Release 3-year vision mock-ups](https://gitlab.com/groups/gitlab-org/-/epics/3825).

## Team Members

The following people are permanent members of the Release group:

<%= direct_team(manager_slug: 'fullstack-engineering-manager-release') %>

## Stable Counterparts

The following members of other functional teams are our stable counterparts:

<%= stable_counterparts(role_regexp: /[,&] Release/, manager_slug: 'fullstack-engineering-manager-release') %>

## Technologies

Like most GitLab teams, we spend a lot of time working in Rails and Vue.js on the main [GitLab app](https://gitlab.com/gitlab-org/gitlab), but we also do some work in Go which is used heavily in the [Gitlab Release CLI](https://gitlab.com/gitlab-org/release-cli). Familiarity with Docker and Kubernetes is also useful on our team.

## How we measure Success
We use performance indicator dashboards to determine if we are successfully delivering on the [Development Department KPIs](/handbook/engineering/development/performance-indicators/). We also
define quarterly Objectives & Key Results (OKRs) to set and track measureable team goals.

### Dashboards

- [Release error budget dashboard](https://dashboards.gitlab.net/d/stage-groups-release/stage-groups-release-group-dashboard?orgId=1)
- [Detailed release error budget dashboard](https://dashboards.gitlab.net/d/stage-groups-detail-release/stage-groups-release-group-error-budget-detail?orgId=1)
- [Release development metrics dashboard](https://app.periscopedata.com/app/gitlab/681347/Development-Embedded-Dashboard?filter=team_group+eq+release)

<%= partial "handbook/engineering/metrics/partials/_cross_functional_dashboard.erb", locals: { filter_value: "Release" } %>


## Common Links

 * [Issue Tracker](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=group%3A%3Arelease)
 * [Slack Channel](https://gitlab.slack.com/archives/s_release)
 * [Direction](/direction/delivery/)

## How to work with us

### On issues

Issues that contribute to the release stage of the devops toolchain have the `~"group::release"` label.

### In Slack

The stage's primary Slack channel is `#s_release`. We also support a number of feature channels for discussons or questions about a specific [feature area](/handbook/product/categories/#release-stage). We no longer support issue specific channels, as they are easy to lose track of and fragment the discussion. Supported channels are:

* Release orchestration: `f_release_orchestration`
* Deployment Approvals: `f_deploy_approvals`
* Feature flags: `f_feature_flags`

### Youtube playlists

We use following Youtube playlists:

- [Release stage](https://youtube.com/playlist?list=PL05JrBw4t0Kqj3Dk9qD5CIrpQdLbaxrXf) - meetings and other recordings relevant to our group
- [Release stage onboarding](https://youtube.com/playlist?list=PL05JrBw4t0Kqa672va-2ACtI1N5M4a5id) - resources relevant for new developers such as product categories demos, development setup demos, and more
- [Release UX](https://www.youtube.com/playlist?list=PL05JrBw4t0KoyqCjN4f79w0dYZusHLx15) - UX Scorecard walkthroughs, UX reviews, group feedback sessions, team meetings, and more
- [GitLab Group Kickoffs - Release:Release](https://www.youtube.com/playlist?list=PL05JrBw4t0KplRWO9xUtTAtgZvVf5CqtW) - Milestone kickoff videos

### Community Contributions
We hold recurring office hours to give community members a chance to discuss any questions, issues, or merge requests. For details about
upcoming office hours, [check out the epic](https://gitlab.com/groups/gitlab-org/-/epics/4512) or the [playlist on GitLab Unfiltered](https://www.youtube.com/playlist?list=PL05JrBw4t0KpH7NVc9_K70mbFemd5qFq7).

#### Applying labels

We use the following labels to promote issues among community contributors:
- `~"Seeking community contributions"`. Sometimes we can write down the clear implementation instructions, but don't have the capacity to work on the issue ourselves. We mark such issues as `~"Seeking community contributions"`.
- If the issue is also almost trivial, we apply `~"good for new contributors"`. Such issues can help community contributors to learn the review process without need for deep understanding of our codebase.

#### Handling

The Release team engineers will work with the Product Manager to regularly triage issues that are viable candidates for community contribution. There are a few ways that team members
can assist with contributions, primarily by:
- participating in and answering questions during the community office hours
- making sure that the merge requests have the [proper labels](#applying-labels)
- making sure that reviews are happening, or suggesting reviewers
- commenting on or reviewing merge requests
- offering to pair program through Zoom if a contributor needs additional assistance

If a merge request becomes a high priority task and the contributor has become less active or stalled, consider adding an explanation comment and finishing the merge request. Always remember to give credit and
appreciation to the community contributor in order to encourage future participation.

## Planning and Workflow

We are always striving to improve and iterate on our planning process as a team. To maximize our velocity and meet our deliverables, we follow the process outlined on our
[planning page](./planning).

### Product Workflow

We aim to follow the [Product Development Flow](https://about.gitlab.com/handbook/product-development-flow/) as closely as possible to plan and track features as they make their way from idea to production. The [Release Team Workflow board](https://gitlab.com/groups/gitlab-org/-/boards/1285883?&label_name[]=devops%3A%3Arelease) can be used to follow features in each stage of the process. This board details the various stages an issue can exist in as it is being developed. It's not necessary that an issue go through all of these stages, and it is allowed for issues to move back and forward through the workflow as they are iterated on.

#### Workflow Stages

Below is a high level description of each stage, its meaning, and any requirements for that stage.

* `workflow::problem validation`
  * This stage aims to produce a clear and shared understanding of the customer problem.
* `workflow::design`
  * In this stage the Product Designer leads the team in ideating potential solutions and exploring different approaches before converging on a single solution.
* `workflow::solution validation`
  * This output of this stage is a clear prototype of the solution to be created.
* `workflow::planning breakdown`
  * This stage signals that an issue is ready for estimation, prioritization, and possibly breaking down further for effective iteration.
* `workflow::ready for development`
  * This stage indicates the issue is ready for engineering to begin their work.
  * Issues in this stage must have a `UX Ready` label, as well as either `frontend`, `backend` or both labels to indicate which areas will need focus.
* `workflow::in dev`
  * This stage indicates that the issue is actively being worked on by one or more developers.
* `workflow::in review`
  * This stage indicates that the issue is undergoing code review by the development team and/or undergoing design review by the UX team.
* `workflow::verification`
  * This stage indicates that everything has been merged and the issue is waiting for verification after a deploy.
* `workflow::complete`
  * The work has been verified and the issue is closed.

### Error Budget
The [Release Error Budget dashboard](https://dashboards.gitlab.net/d/stage-groups-detail-release/stage-groups-release-group-error-budget-detail?orgId=1) is used to identify and prioritize issues that are impacting our customers and infrastructure performance.

To ensure that we are consistently monitoring and addressing these issues, each milestone the engineering manager will review the error budget dashboard to monitor changes and determine whether or not we're exceeding our budget. If needed, investigation issues will be opened to identify what is contributing to our error budget spend, and the `~release::error-budget` label
will be applied to facilitate tracking and measurement. These issues will be added to the upcoming milestone, and an engineer will be assigned to help determine the root cause. Once a potential solution has been identified, the issue will be triaged based on the [regular triage process](https://about.gitlab.com/handbook/engineering/quality/issue-triage/#severity) and scheduled per the regular async planning process.

In some instances, we may determine that a service is functioning properly and that an adjustment needs to be made to our [Service Level Indicators (SLI)](https://about.gitlab.com/handbook/engineering/monitoring/#gitlabcom-service-level-availability). If it is determined that the current thresholds are too low for a given service, the Product Manager who is the DRI for error budget spend, will work with the team to determine an appropriate SLI for that service.

More information about [error budgets](https://about.gitlab.com/handbook/engineering/error-budgets/) and how they are calculated can be found in the [error budget dashboard documentation](https://docs.gitlab.com/ee/development/stage_group_dashboards.html#error-budget).

#### Investigating Error Budget

To investigate a decrease or a discrepancy in the error budget, an engineer can utilize one of the following dashboards.

- [Release error budget dashboard](https://dashboards.gitlab.net/d/stage-groups-release/stage-groups-release-group-dashboard?orgId=1)
- [Detailed release error budget dashboard](https://dashboards.gitlab.net/d/stage-groups-detail-release/stage-groups-release-group-error-budget-detail?orgId=1)

The Release error budget dashboard provides a good overview of all the key metrics for the Release team. The Detailed release error budget dashboard is more focused on [Service Level Indicators (SLIs)](https://about.gitlab.com/handbook/engineering/monitoring/#gitlabcom-service-level-availability). Both of them share an overview of the error budget and the budget spend attribution.

The budget spend attribution is often very helpful in determining where failures might be coming from. Violations are separated by the following types and components, respectively:

- API – `rails_request`: for API requests with violations on the framework (rails) level.
- API - `puma`: for API requests with violations on the server (puma) level.
- Web - `rails_request`: for Web requests with violations on the framework (rails) level.
- Web - `puma`: for Web requests with violations on the server (puma) level.
- Sidekiq - `sidekiq_execution`: for background jobs executed by Sidekiq.

There are also two types of a violation, an `apdex` or an `error`:

- `apdex`: an operation succeeded but not within set threshold.
- `error`: an operation that failed, e.g. failed background job, a request returning 500 response error.

**Note**: not all components are implemented, so `GraphQL` failures for example will not be adding up to the budget spend.

#### How to investigate the budget?

Before you start, it is important to keep in mind that sometimes, there might be an infrastructure issue or some other underlying problem that affects the error budget negatively (check [this issue](https://gitlab.com/gitlab-org/gitlab/-/issues/389380#note_1261620712) for instance). In such cases, the steps below might not be very helpful for an investigation. If unsure about this, it might be a good idea to check with the engineering manager or fellow team members. Also look out for discussions in any of these slack channels: `#infrastructure-lounge`, `#incident-management`, or `#f_error_budgets`, as similar cases are often discussed there.

1. It is usually a good idea for an engineer to start their investigation by looking at the budget spend attribution section (often collapsed), as this will help them identify where a discrepancy is coming from. On the left side of that section, you can start by exploring the [budget failures panel](https://dashboards.gitlab.net/d/stage-groups-release/stage-groups-release-group-dashboard?orgId=1&viewPanel=14). The panel shows the aggregated number of failures for the past 28 days, and the total number of measurements (i.e. how many total operations happened for that particular type and component). Having both numbers available is a good way to see the percentage of failures in comparison to total operations. Usually, the item with top failures will have the biggest impact on the error budget spend.
2. After determining the type of violation and the component, the next step would be to check the [failure log links panel](https://dashboards.gitlab.net/d/stage-groups-release/stage-groups-release-group-dashboard?orgId=1&viewPanel=16) to the right side. This one, as the name implies, links to the logs for failed and slow operations, and engineers can find more information about them in the panel.
3. When accessing one of these links, an engineer will find they provide an aggregated count of the violating operations and their callers (e.g. a job or a controller, etc.). They also display the threshold, which is based on the [request urgency](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html#adjusting-request-urgency). This serves as a good overview of all violating callers, and will make it easier for the engineer to investigate the exact error as they could identify which endpoint or method is the root cause for the decline in error budget.
4. The last step is to uncover the error itself, which can be done by accessing the [production logs](https://log.gprd.gitlab.net/app/discover), using the same filters used in any of the links aforementioned.
5. If an engineer determines the error is a bug (i.e. not a network or database timeout for example), they should create an issue and add it to this [epic](https://gitlab.com/groups/gitlab-org/-/epics/9149) were similar investigations and improvements are handled. There are times when limitations and timeouts should also be investigated and fixed. It's the engineer's responsibility to decide whether the error is due to some invalid configuration that can be fixed or not.

### Quality
Our goal is to ship software at scale without sacrificing quality or velocity. In order to do that, we believe that the quality of our product must be a shared responsibility.

Every member of the Release team contributes to quality through better software design, proper testing practices and bug prevention strategies. We ensure these best practices are followed by:

1. Being a champion for better software design through thoughtful and thorough code reviews, following the [Gitlab code review guidelines](https://docs.gitlab.com/ee/development/code_review.html).
2. Resolving small bugs or fixing flakey tests immediately, using the `stuff that should just work` label.
3. Writing meaningful unit tests and integration tests for every feature, and working with our Software Engineers in Test (SETs) to contribute to our End to End tests as needed in alignment with the [test coverage pyramid](https://gitlab.com/gitlab-org/gitlab/blob/master/doc/development/testing_guide/testing_levels.md).
4. Reviewing our bug [Triage report](https://about.gitlab.com/handbook/engineering/quality/triage-operations/#triage-reports)  for bugs and regressions regularly and working with key stakeholders to prioritize and take action.

#### Code Review
Code reviews follow the standard process of using the [reviewer roulette](https://docs.gitlab.com/ee/development/code_review.html#reviewer-roulette) to choose a reviewer and a maintainer. The roulette is optional, so if a merge request contains changes that someone outside our group may not fully understand in depth, it is encouraged that a member of the Release team be chosen for the preliminary review to focus on correctly solving the problem. The intent is to leave this choice to the discretion of the engineer but raise the idea that fellow Release team members will sometimes be best able to understand the implications of the features we are implementing. The maintainer review will then be more focused on quality and code standards.

This tactic also creates an environment to ask for early review on a WIP merge request where the solution might be better refined through collaboration and also allows us to share knowledge across the team.

## Team Process
#### Async Issue Updates
Our daily updates on progress and status will be added to the issues as a comment. A daily update may be skipped if there was no change in progress. It's preferable to update the issue rather than the related merge requests,
as those do not provide a view of the overall progress.
The status comment should include what percentage complete the work is, the confidence of the person that their estimate is correct and, notes on what was done and/or if review has started. Finally, if there are multiple MRs associated with an issue, please include an entry for each.
A couple of suggestions to consider when adding your async updates:
* It may be good to include whether this is a front end or back end update if there are multiple people working on it
* Adding technical notes as you work through an issue is a great way to create an opening for others to engage and collaborate.

Template:

```
Complete:

Confidence:

Notes:

Concern:
```

Examples:
```
Complete: 80%
Confidence: 90%
Notes: expecting to go into review tomorrow
Concern: ~frontend
```
```
Issue status: 20% complete, 75% confident
MR statuses:
!11111 - 80% complete, 99% confident - docs update - need to add one more section
!21212 - 10% complete, 70% confident - api update - database migrations created, working on creating the rest of the functionality next
```


#### Weekly Status Update
The **Weekly Status Update** is configured to run at noon on Fridays, and contains three questions:

1. ***What progress was made on your deliverables this week?*** (MRs and demos are good for this)

    The goal with this question is to show off the work you did, even if it's only part of a feature. This could be a whole feature, a small part of a larger feature, an API to be used later, or even just a copy change.

2. ***What do you plan to work on next week?*** (think about what you'll be able to merge by the end of the week)

    Think about what the next most important thing is to work on, and think about what part of that you can accomplish in one week. If your priorities aren't clear, talk to your manager.

3. ***Who will you need help from to accomplish your plan for next week?*** (tag specific individuals so they know ahead of time)

    This helps to ensure that the others on the team know you'll need their help and will surface any issues earlier.

#### Taking Time Off
When going out of office (OOO), be sure to clearly communicate it with other people.
1. In [PTO by Deel](/handbook/paid-time-off/#pto-by-deel), set a role for your backup person during your PTO. If you will be out for an extended period (greater than two days),
consider assigning the team slack channel `#s_release` as your backup to help distribute the workload.
1. Add the [Release Shared Calendar](https://calendar.google.com/calendar/u/0/embed?src=gitlab.com_8josslksslj9avafu2p77csbkc@group.calendar.google.com&ctz=America/Chicago) to your PTO by Deel settings so your PTO events are visible to everyone in the team. The calendar ID is: `gitlab.com_8josslksslj9avafu2p77csbkc@group.calendar.google.com`
Read more in the [Paid time off](/handbook/paid-time-off/#a-gitlab-team-members-guide-to-time-off) page.

#### Personal Growth Day (Pilot)
To help team members carve out time for their own personal development, the Release team will be piloting an **optional** Personal Growth Day once per milestone. Team members should consider using the first Friday of every milestone to minimize impact on our deliverables. However, individuals should use their discretion and choose a day that works best for them based on their current priorities.

On our dedicated personal growth day:
* Syncs meetings are cancelled or moved
* Time is used to focus on career development - This can include working on the career matrix, learning a new skill or deepening current skills

Suggested Resources:
* [Career Development](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/handbook/people-group/learning-and-development/career-development)
* [Learning & Development](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/handbook/people-group/learning-and-development)
* [Learning Initiatives](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/handbook/people-group/learning-and-development/learning-initiatives)

#### Team Social
The Release team schedules two optional social/gaming calls every month, one in APAC and one in EMEA time zones. Every month we rotate game selection amongst the team, making sure everyone has a chance to participate. Our primary goal is to build
better relationships as a team, and more importantly to just have fun! If you'd like to join us, send a request in `#s_release` slack channel to get added to the invite.

#### Dogfooding
The Release team has historically been responsible for [dogfooding](/handbook/engineering/development/principles/#dogfooding) the [releases](https://docs.gitlab.com/ee/user/project/releases/) feature. See the [Dogfooding GitLab Releases](/handbook/engineering/development/ops/release/dogfooding.html) page for more information.

### Onboarding
There is a cheat sheet of useful tidbits of information for anyone onboarding at GitLab about our environments, practices and advice for learning how to practice development here at GitLab. See the [Onboarding Cheat Sheet](/handbook/engineering/development/ops/release/onboarding-cheat-sheet.html) for more information.

### Release stage test projects

You can try out [the features of the Release stage](https://about.gitlab.com/handbook/product/categories/#release-group)
in test projects. These demonstrable projects are located in the [test-group group](https://gitlab.com/gitlab-org/ci-cd/release-group/test-group).

- To request access to a test project (e.g. Maintainer role), please reach out to us in `#s_release` slack channel.
- If you have a new test project proposal, please create an issue in [this project](https://gitlab.com/gitlab-org/ci-cd/release-group/release)
  that explains the purpose, scope and usage of the project.

#### How to create a new test project

There is no specific format for the test projects, however, keep in mind the following points:

- The project `README.md` should explain what [features or categories](https://about.gitlab.com/handbook/product/categories/#release-group) are demonstrable.
- Anyone in GitLab can modify the project for testing purpose. Consider how to restore the original condition by forking a project.
