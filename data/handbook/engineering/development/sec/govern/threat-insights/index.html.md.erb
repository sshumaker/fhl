---
layout: handbook-page-toc
title: Govern, Threat Insights
description: "The Threat Insights group at GitLab is charged with developing solutions to enable customers to manage their security risks effectively and efficiently."
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## Threat Insights

We are responsible for developing solutions to give customers insights into threats and enable them to manage their security risks effectively and efficiently.

## Common Links

* Slack channels:
  * Main channel: [`#g_govern_threat_insights`](https://gitlab.slack.com/archives/CV09DAXEW/p1663788936706469)
  * Stand-up updates: [`#g_govern_threat-insights_standup`](https://gitlab.slack.com/archives/C01U7T6DPNY)
  * Engineering team Navy: [`#g_govern_threat_insights_navy`](https://gitlab.slack.com/archives/C042WT4PJN9)
  * Engineering team Tangerine: [`#g_govern_threat_insights_tangerine`](https://gitlab.slack.com/archives/C043G312PHS)
* Slack aliases: `@govern_threat_insights_be`, `@govern_threat_insights_fe`
* Google groups: eng-dev-secure-threat-insights-members@gitlab.com

## How we work

Threat Insights is a large group, and to reduce planning overhead, engineering is organized into two teams, Navy and Tangerine, that each approach work in [vertical slices](https://www.visual-paradigm.com/scrum/user-story-splitting-vertical-slice-vs-horizontal-slice/). This is more efficient because it virtually eliminates the cross-team dependency that comes from organizing a large group by technical expertise.

Both teams have Backend and Frontend engineers, and as such work on any part of our codebase. However, Team Navy primarily focuses on features that affect the user interface, while Team Tangerine concentrates on data management.

We use the scoped labels `~"Threat Insights::Navy"` `~"Threat Insights::Tangerine"` to designate work for each team. Navy engineers report to <%= link_to_team_member('nmccorrison') %> and Tangerine engineers report to <%= link_to_team_member('thiagocsf') %>.

### Prioritization

We use our [Threat Insights Priorities](https://gitlab.com/groups/gitlab-org/-/epics/8544) issue to track what we are doing, and what order to do it in.

<%= partial "handbook/engineering/metrics/partials/_cross_functional_dashboard.erb", locals: { filter_value: "Threat Insights" } %>

### Workflow

The Threat Insights group largely follows GitLab's [Product Development Flow](/handbook/product-development-flow/).
Additional information about how we operate can be found on the [Planning page](/handbook/engineering/development/sec/govern/sp-ti-planning.html).

#### MR Reviews

We follow these guidelines when submitting MRs for review when the change is within the Threat Insights domain:

1. The initial review should be performed by a member of the team. This helps the team by:
   - Faster reviews, as the reviewer is already familiar with the domain
   - Additional awareness of changes taking place within the domain
   - Identifying changes that don't align with what is happening with the domain 
1. For GraphQL changes, the MR should be reviewed by a frontend engineer as soon as possible. This helps to validate the interface, and allows changes to be made before tests are written.

### Issue Boards

* [Threat Insights Delivery Board](https://gitlab.com/groups/gitlab-org/-/boards/1754666?scope=all&utf8=%E2%9C%93&milestone_title=%23started&label_name[]=group%3A%3Athreat%20insights)
   * Primary board for engineers from which engineers can work. It's stripped down to only include the workflow labels we use when delivering software.

* [Threat Insights Planning Board](https://gitlab.com/groups/gitlab-org/-/boards/1420734?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=group%3A%3Athreat%20insights)
   * Milestone-centric board primarily used by product management to gauge work in current and upcoming milestones.

* [Threat Insights "Ready to Pull" Board](https://gitlab.com/groups/gitlab-org/-/boards/4643978?label_name[]=group%3A%3Athreat%20insights&label_name[]=ready%20to%20pull)
   * Secondary board for unassigned issues that are separate from a larger effort. Ideal candidates are small features, bugs, and follow-up items. 

These boards show current status of issues. See also [priorities](https://gitlab.com/groups/gitlab-org/-/epics/8544) and [milestone planning](https://gitlab.com/gitlab-org/gitlab/-/issues/?sort=created_date&state=opened&label_name%5B%5D=Planning%20Issue&label_name%5B%5D=group%3A%3Athreat%20insights&first_page_size=20).

### Indicating Status and Raising Risk

Our teams use the [Health Status](https://docs.gitlab.com/ee/user/project/issues/managing_issues.html#health-status) feature within issues to indicate the likelyhood of completion within the milestone. We assign `On Track` at the beginning of a milestone to a small number of issues where we have high confidence in delivery during that milestone. If there is concern with marking something as initially on track, then we should discuss why.

Raising risk early is important. The more time we have, the more options we have. For example, issues that have not gone into review by the 10th of the month may not have enough time to get merged. These should be considered Needs Attention or At Risk depending on their complexity and other factors.

Follow these steps when raising or downgrading risk:

1. Update the Health Status in the issue:
    1. `On Track` - high confidence - there is no indication the work won't get merged by the 15th.
    1. `Needs Attention` - medium confidence - the issue is blocked or has other factors that need to be discussed.
    1. `At Risk` - low confidence - the issue is in jeopardy of missing the merge cutoff of the 15th.
1. Add a comment about why the risk has increased or decreased. Copy the Engineering Manager and Project Manager for awareness.

Note that an issue probably shouldn't go directly from On Track to At Risk. That pattern indicates we have missed an opportunity to discuss earlier. Consider the progression: `On Track -> Needs Attention -> At Risk`.

Additionally, we make use of our [automated policy](https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/policies/groups/gitlab-org/hygiene/adjust-health-status.yml) that automatically degrades the health of scheduled issue based on conditions. This enabled per issue by adding the `~Track Health Status` label.

## Quality

### How to classify MRs which need to run Package and QA?

It is advisable to manually trigger the `Package and QA` downstream [E2E](https://docs.gitlab.com/ee/development/testing_guide/end_to_end/) job in an MR and review the results when there are changes in:
   - GraphQL (API response, query parameters, schema etc)
   - Gemfile (version changes, adding/removing gems)
   - Vue files which contain "data-qa-selector" attribute because these are used in identifying UI elements in E2E tests
   - Database schema/query changes
   - Any frontend changes which directly impact vulnerability report page, MR security widget, pipeline security tab, security policies, configuration, license compliance page

To manually trigger the QA job:
1. Navigate to the pipelines tab of the MR. 
2. Click the the `>` arrow on the right of the `Stages` and click the `package-and-qa` item.

It's advisable to run the QA job on the latest pipeline at least once during the MR review cycle.

## Monitoring

- [Stage Group dashboad on Grafana](https://dashboards.gitlab.net/d/stage-groups-threat_insights/stage-groups-threat-insights-group-dashboard)
- [Largest Contentful Paint (LCP)](https://dashboards.gitlab.net/d/sftijGFMz/sitespeed-lcp-leaderboard?from=now-90d&orgId=1&to=now&refresh=30s&var-namespace=sitespeed_io&var-path=desktop&var-domains=gitlab_com&var-pages=Secure_Instance_Dashboard_Settings&var-pages=Secure_Instance_Security_Dashboard&var-pages=Secure_Instance_Vulnerability_Report&var-pages=Secure_Group_Security_Dashboard&var-pages=Secure_Group_Vulnerability_Report&var-pages=Secure_Project_Security_Dashboard&var-pages=Secure_Project_Vulnerability_Report&var-pages=Secure_Standalone_Vulnerability&var-browser=chrome&var-connectivity=cable&var-function=median) for our web pages.

## Contributing

### Local testing of licensed features
When a feature needs to check the current license tier, it's important to make sure this also works on GitLab.com.

To emulate this locally, follow these steps:

1. Export an environment variable: `export GITLAB_SIMULATE_SAAS=1`[^1]
1. Within the same shell session run `gdk restart`
1. Admin > Settings > General > "Account and limit", enable "Allow use of licensed EE features"

See the [related handbook entry](https://docs.gitlab.com/ee/development/ee_features.html#act-as-saas) for more details.

### Cross-stack collaboration
We encourage frontend engineers to contribute to the backend and vice versa. In such cases we should work closely with a domain expert from within our group
and also keep the initial review internal. 

This will help ensure that the changes follow best practice, are well tested, have no unintended side effects, and help the team be across any changes that go into the Threat Insights codebase.

### Community Contributions
The Threat Insights grop welcomes community contributions. Any community contribution should get prompt feedback from one of the Threat Insights engineers. All engineers on the team are responsible for working with community contributions. If a team member does not have time to review a community contribution, please tag the Engineering Manager, so that they can assign the community contribution to another team member.

### Office Hours

We hold company-wide office hours alternating Mondays at 3:30pm UTC. Everyone is invited to attend, and it's a great forum to ask questions about Vulnerability Management, customer queries, our road map, and what the Threat Insights team might be thinking about. You can find the [invite](https://calendar.google.com/event?action=TEMPLATE&tmeid=MTF2dGdva3ByNTN2amFzMTltZHZsdXVmaGZfMjAyMjA5MjZUMTUzMDAwWiBnaXRsYWIuY29tX2VkNjIwN3VlbDc4ZGUwajE4NDl2ampuYjNrQGc&tmsrc=gitlab.com_ed6207uel78de0j1849vjjnb3k%40group.calendar.google.com&scp=ALL) on our GitLab Team Meetings shared calendar and take a look at [the agenda](https://docs.google.com/document/d/1CYndmI23HLfrM2zSE8y4V2DtleC6z7bgOZehFxsRnOI/edit#heading=h.1e8qlf7tg4kl). We hope to see you there!

## Footnotes

[^1]: There are many ways to pass an environment variable to your local GitLab instance. For example, you can create a `env.runit` file in the root of your GDK with the above snippet.
