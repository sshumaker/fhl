---
layout: handbook-page-toc
title: Sec Section
description: >-
  The Sec Section is composed of development teams working on Secure
  and Govern features of the GitLab DevOps Platform.
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

<%= devops_diagram(%w(Secure Govern)) %>

## Teams and Handbook Pages

The following teams comprise the sub-department:

- Govern stage - [handbook](/handbook/engineering/development/sec/govern/)
  - Security Policies group - [handbook](/handbook/engineering/development/sec/govern/security-policies/)
  - Threat Insights group - [handbook](/handbook/engineering/development/sec/govern/threat-insights/)
  - Compliance group - [handbook](govern/compliance/)
- Secure stage - [handbook](/handbook/engineering/development/sec/secure/)
  - Composition Analysis group - [handbook](/handbook/engineering/development/sec/secure/composition-analysis/)
  - Dynamic Analysis group - [handbook](/handbook/engineering/development/sec/secure/dynamic-analysis/)
  - Static Analysis group - [handbook](/handbook/engineering/development/sec/secure/static-analysis/)
  - Vulnerability Research group - [handbook](/handbook/engineering/development/sec/secure/vulnerability-research/)
  - API Security - [handbook](https://about.gitlab.com/handbook/engineering/development/sec/secure/api-security)

It is important to delineate who the EM and PM DRIs are for every functionality, especially where this may not be obvious. This is documented on a dedicated [delineation page](delineate-sec.html).

## Product Direction

Product direction can be found on the [Sec Section Product Direction](/direction/security/) handbook page.

## Project Setup

Keeping our projects organized is very important for productivity and maintainability.
- To setup a new project we follow the [company-wide Engineering guidelines](https://about.gitlab.com/handbook/engineering/gitlab-repositories/).
- All Sec projects should be organized into either
  - https://gitlab.com/gitlab-org/secure
  - https://gitlab.com/gitlab-org/govern
  - https://gitlab.com/gitlab-org/security-products

In general, we want to keep as few projects in `security-products` as necessary.

`security-products` should only contain :
- Source code for applications that will run as part of a customer install
- Demos
- Historical projects that are difficult to move.

`secure` and `govern` should have projects for:
- End-to-end testing
- Benchmarks / Stats
- Tooling

There may be projects that should belong in `secure` or `govern` but for technical reasons are much easier to have in `security-products`. In those cases, we can locate the project in `security-products` if reasonable efforts were made to get the project in `secure` or `govern` but were unsuccessful.

### Other settings

Due to https://gitlab.com/gitlab-org/gitlab/-/issues/220535, we may choose to leave the Issue
tracker enabled in the new project. In these cases, please consider these to avoid abandoned
issues:

1. Make the tracker private.
1. Add an issue template with instructions.
1. Ensure there's a triage process in place.

## Performance Indicators

- [Sec Sub-department Performance Indicators](/handbook/engineering/metrics/sec/)
- [Error Budgets](/handbook/engineering/error-budgets/) as Performance Indicators for stage groups

### Dashboards

<%= partial "handbook/engineering/metrics/partials/_cross_functional_section_dashboard.erb", locals: { filter_value: "sec" } %>

## Slack channels

- [#sec-section](https://gitlab.slack.com/archives/C02087FTL5V) - Sec Section discussions spanning the Govern, and Secure stages.
- [#sec-growth-datascience-people-leaders](https://gitlab.slack.com/archives/C033F69CQCB) - Engineering people leaders in Sec, Growth, and ModelOps.
- [ðŸ”’sec-growth-datascience-leadership-confidential](https://gitlab.slack.com/archives/GKWF00Y3E) - Private channel for engineering people leaders in Sec, Growth, and ModelOps.

## Calendars

We have two stage level calendars, [Secure Stage Calendar](https://calendar.google.com/calendar/embed?src=gitlab.com_md0ao36gpvl5v1f4128erhnj6g%40group.calendar.google.com) and [Govern Stage Calendar](https://calendar.google.com/calendar/embed?src=gitlab.com_ed6207uel78de0j1849vjjnb3k%40group.calendar.google.com), where we host cross-group events such as:

1. Monthly retrospective
1. Coffee chats
1. Staff sync
1. Sec Frontend Chapter

Each group also has a calendar for team-based discussions, such as the our weekly group syncs.

We encourage utilizing our available [Google Groups](https://groups.google.com/my-groups) instead of including individuals as attendees when possible. Along with ensuring the event is represented on individual's calendars for visibility, new team members are automatically added to events (as well as removed when someone departs from a team).

### Google Groups

Google groups [were setup](https://gitlab.com/gitlab-org/secure/general/-/issues/246) and are structured as:
  - sec-section
  - sec-govern
  - sec-secure
  - sec-govern-threat-insights
  - sec-govern-security-policies
  - sec-govern-compliance
  - sec-secure-static-analysis
  - sec-secure-dynamic-analysis
  - sec-secure-composition-analysis

The members of each google group consists of stable counterparts and the correct `eng-dev-[sub-department]-[team]` group of engineers. When stable counterparts change, or team members onboard/offboard the appropriate group should be updated. 


## Staying Informed and Informing Team Members

- [Sec Week In Review Google Document](https://drive.google.com/drive/search?q=%22Sec%20Section%20Week%20In%20Review%22) - is an asynchronous weekly document of notables things happening in Sec. The document is inspired by the [Engineering Week In Review](https://about.gitlab.com/handbook/engineering/#communication).
- Slack channels #s_secure and #s_govern are informative since they are all part of Sec Section.

## Planning in the Section

In the vast majority of cases, work is scoped to individual groups within the section. However, there are times when the section needs to design
and execute solutions as a coordinated Section or risk creating poor and non-cohesive user experiences.

These initiatives will be orchestrated through epics and issues. Initiatives with the following labels are deemed to fall in this category of work.

- [`~section::sec` and `~group::not owned`](https://gitlab.com/groups/gitlab-org/-/issues/?sort=created_asc&state=opened&label_name%5B%5D=section%3A%3Asec&label_name%5B%5D=group%3A%3Anot_owned); or
- [`all Sec groups`](https://gitlab.com/groups/gitlab-org/-/issues/?sort=created_asc&state=opened&label_name%5B%5D=all%20Sec%20groups)

### Process for planning section-wide initiatives

At least once per milestone, Senior Engineering Managers in the section will do the following:

- In partnership with Product Management, initiatives 6 months or older will be evaluated to determine if they're still relevant.
- New initiatives will be triaged, checking their requirements for understandability and completeness. Further, the group most impacted will be identified.
  - In situations where most impacted group is not clear, the Architectural Council will be engaged to help discern which group that might be.
- Group most impacted will be declared DRI for that initiative and are expected to:
  - Produce a high-level implementation plan that will scale for the whole problem.
  - Create implementation issues that are broken down by feature category.
    - The original high-level implementation plan will be included, or at least directly linked, in the created issues.
    - Original issue where implementation plan was debated and created will also be linked to the generated issues.
  - Distribute implementation issues to the relevant groups.

Generated issues will be worked through normal prioritization processes as they are distributed to individual groups.

## Councils and Chapters

### Architectural Council (Slack [#s_sec-architectural-council](https://gitlab.slack.com/archives/C012RKVK231))

[Snippet to use in issues](https://gitlab.com/gitlab-com/www-gitlab-com/-/snippets/2126492).

In order to help the Sec section come to resolution on defining approaches to section-wide issues,
we have formed an Architectural Council. This group comprises tech leads (and SMEs to provide context)
in order to keep the team small and nimble. The group is a non-authoritative, supportive group whose members provide representative insights from their respective teams.

* Tech leads will serve as the representative for their team
* An issue should be created to capture the discussion that covers:
  * What is the issue at hand and what is the preferred action
  * What are the potential solutions and their associated pros/cons
  * What approach was decided and why
  * 2-business day [SLO](/handbook/engineering/workflow/code-review/#review-response-slo)
    * We need to know when to start the clock on these as some issues can exist for months before being brought to the council. In this case, we should define within the issue when the clock does start.
* There will be a DRI assigned to the issue that is being discussed
* The DRI will be decided by either who has to address the issue first or where the code change is occurring the most (in that order)
* The issue will be discussed and the DRI will be the ultimate decision-maker for the approach taken
* Issues will be tackled on a First-In-and-First-Out (FIFO) order. Attempts to minimize SLA overlap should be made to prevent scheduling conflicts between memberâ€™s time

#### Considerations when determining the approach

* Simplicity and elegance
* Portability and/or modularity
* Supportability
* Maintainability
* Scalability
* Extensibility
* Reliability
* Security
* Cost (will it impact .com for large customers)
* Performance (speed and accuracy)
* Consistency (Fit with existing code base)

#### Capturing Resolved/Discovered Standards

Common scenarios/architectural concepts will likely be resolved/discovered. These should be captured generically in an architectural guidelines page of the handbook and, if possible, codified into our processes/templates.

##### Scope

The table below captures characteristics (requirements?) of work that is in-scope, opt-in, or out-of-scope. All requirements must be met for each category.

| Reason/Condition                                           | In-Scope | Opt-in | Out-of-Scope |
|------------------------------------------------------------|----------|--------|--------------|
| Does not involve architectural decisions                   |          |        | x            |
| Is after-the-fact                                          |          |        | x            |
| Is not already covered by architecture guidelines/handbook | x        | x      |              |
| Has broad impact within #secure[^1]                        | x        |        |              |
| Is a new unit of work                                      | x        | x      |              |
| Is strictly #secure or #govern                             | x        | x      |              |
| Could not come to an agreement (escalation)                |          | ?      |              |
| Involves architecture decisions                            | x        | x      |              |

[^1]: Meaning that the proposed work requires knowledge or impacts multiple groups

#### Acceptance Criteria

GitLabâ€™s Stance for Architectural issues: https://about.gitlab.com/handbook/engineering/architecture/

#### Team Representatives

| Team                                                     | Representative                                                                   |
|----------------------------------------------------------|----------------------------------------------------------------------------------|
| [Composition Analysis](secure/composition-analysis/)     | <%= link_to_team_member('fcatteau') %>                                           |
| [Security Policies](govern/security-policies/)           | <%= link_to_team_member('mparuszewski') %>                                       |
| [Dynamic Analysis](secure/dynamic-analysis/)             | <%= link_to_team_member('cam_swords') %>                                         |
| [Static Analysis](secure/static-analysis/)               | <%= link_to_team_member('theoretick') %>                                         |
| [Threat Insights](govern/threat-insights/) BE            | <%= link_to_team_member('minac') %>                                              |
| [Threat Insights](govern/threat-insights/) FE            | <%= link_to_team_member('svedova') %>                                            |
| [Vulnerability Research](secure/vulnerability-research/) | <%= link_to_team_member('idawson') %>, <%= link_to_team_member('julianthome') %> |

### Frontend Chapter (Slack [#secure-frontend-chapter](https://gitlab.slack.com/archives/C031RSQ72S2))

The Sec Section Frontend Chapter at GitLab is a federation of all Frontend Engineers and team members interested in frontend-related topics within the Sec Section.

The main purpose of the Frontend chapter is to connect Frontend Engineers within the Secure Group,
share knowledge, exchange about common challenges and leverage their collaboration.

The chapter was founded when Secure transitioned to Fullstack Teams which resulted in some Engineers being
the isolated experts within their team.

The members of the chapter exchange through the [slack-channel](https://gitlab.slack.com/archives/C031RSQ72S2), there is also a sync meeting twice a month on the Secure Group Calendar.

There is no strict rulebook of how chapter-members collaborate with each other. The chapter is about
visibility of challenges that might be similar amongst the different teams within the secure-group and how we can
benefit from this.

#### How to contribute

The frontend chapter has identified components that cross team boundaries within the Secure group.

- MR widgets
- Security configuration page
- Tabs in the single pipeline view
- Shared survey banner
- Security Badges
- Project selector dropdowns

##### Surfacing potential conflicts

1. Identify if the issue you are refining touches any of the identified shared components/cross functional areas.
1. If so, ping the frontend chapter in the issue `@gitlab-org/secure/secure-frontend-chapter`.
1. Add the issue to the bi-weekly Secure frontend chapter meeting agenda.
1. At the bi-weekly meeting, walk through the changes described in the issue you plan to work on.
1. Discuss as a team any potential challenges.

#### Team Representatives

| Team                                                 | Representative                                    |
|------------------------------------------------------|---------------------------------------------------|
| [Composition Analysis](secure/composition-analysis/) | <%= link_to_team_member('farias-gl') %>           |
| [Static Analysis](secure/static-analysis/)           | <%= link_to_team_member('jannik_lehmann') %>      |
| [Dynamic Analysis](secure/dynamic-analysis/)         | <%= link_to_team_member('arfedoro') %>            |
| [Dynamic Analysis](secure/dynamic-analysis/)         | <%= link_to_team_member('djadmin') %>             |
| [Threat Insights](govern/threat-insights/)           | <%= link_to_team_member('dftian') %>              |
| [Threat Insights](govern/threat-insights/)           | <%= link_to_team_member('dpisek') %>              |
| [Threat Insights](govern/threat-insights/)           | <%= link_to_team_member('pgascouvaillancourt') %> |
| [Threat Insights](govern/threat-insights/)           | <%= link_to_team_member('sming-gitlab') %>        |
| [Threat Insights](govern/threat-insights/)           | <%= link_to_team_member('svedova') %>             |

#### Page Performance

Our team monitors [LCP](https://about.gitlab.com/handbook/engineering/development/performance-indicators/#largest-contentful-paint-lcp) (Largest Contentful Paint) to ensure performance is below our target (currently 2500ms).

[LCP Dashboard for Secure owned pages](https://dashboards.gitlab.net/d/sftijGFMz/sitespeed-lcp-leaderboard?from=now-90d&orgId=1&to=now&refresh=30s&var-namespace=sitespeed_io&var-path=desktop&var-testname=gitlab&var-domains=gitlab_com&var-pages=API_Fuzzing_Config_UI&var-pages=DAST_Profiles&var-pages=On_Demand_Scans&var-pages=SAST_Config_UI&var-pages=Secure_Dependency_List&var-pages=Secure_License_Compliance&var-pages=Secure_Security_Configuration&var-pages=DAST_Config_UI&var-browser=chrome&var-function=median&var-connectivity=cable)

#### How to work with the Quality team

#### Working with Customer Support

The Sec engineering teams do not provide support directly to customers. Instead engineers collaborate with our Customer Support Engineers via the [process on the Sec Sub-department support project](https://gitlab.com/gitlab-com/sec-sub-department/section-sec-request-for-help/). 

#### Frontend Responsibilities

1. Being able to identify what code changes would likely break E2E or System level tests and informing Quality.
1. Not to write E2E tests, but to catch potential failures and communicate gaps in coverage before landing to master.

#### Identifying potential breakages

1. Look to see if issue you are working on [has existing test coverage](https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/736). These are the tests likely to fail

1. If you are working around code that contains a selector like `data-qa-selector="&lt;name&gt;"`, then there is likely to be an existing E2E test. Tests can be found by searching our [E2E tests in Secure](https://gitlab.com/gitlab-org/gitlab/-/tree/master/qa/qa/specs/features/ee/browser_ui/secure).

#### Communicating changes that may break tests

Ping the DRI for quality assigned to Secure. You can find the person on the [team page](https://about.gitlab.com/handbook/engineering/development/sec/secure/#team-members). If they are unavailable, then #quality on slack or the [triage DRI](https://about.gitlab.com/handbook/engineering/quality/quality-engineering/oncall-rotation/#schedule) dependent on severity.

## Section Retrospectives

In addition to our group retrospectives, we hold a Sec Section level retrospective each month. The goal of the section wide retrospective is to review topics that bubbled-up from our group/team retrospectives. Additionally, we identify themes that could be discussed synchronously.  We use [this doc](https://docs.google.com/document/d/1g_FIMgr9r_Yf56xISxoI8B-1G-kbP3PQSeo7W-kKj24/edit#) to facilitate the section retrospective.

#### Key Dates

1. 26th of each month - Group async retrospective issues are generated. Groups should start contributing topics.
1. Week of the 17th - Groups hold their retrospectives. Team members bubble-up identified topics and follow-up items (outcomes) to the [section retrospective document](https://docs.google.com/document/d/1g_FIMgr9r_Yf56xISxoI8B-1G-kbP3PQSeo7W-kKj24/edit#).
1. Week of the 22nd -  Section wide retrospective sync. AMER/EMEA at 7:30am PT / 2:30pm UTC, APAC at 3:30pm PT / 10:30pm UTC.


#### DRI Responsibilities

The [DRI](https://about.gitlab.com/handbook/people-group/directly-responsible-individuals/) for Section-wide retrospectives will be the Senior Engineering Manager. The SEM will find a volunteer if it is needed on specific milestones. The following tasks are executed each milestone:


1. Prior to the section sync, review bubble-up topics and identify up with 2-3 themes to support sync discussion topics.
1. Ask everyone through Slack to vote on which topics they would like to spend time discussing as a section.
1. Follow up with groups on any identified improvements.
1. Promote, promote, promote!
