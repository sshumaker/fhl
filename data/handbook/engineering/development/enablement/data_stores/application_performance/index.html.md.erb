---
layout: handbook-page-toc
title: Application Performance Group
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## Vision

Make GitLab the most responsive and performant DevOps Platform.

## Mission

The Application Performance group's mission is to ensure that GitLab users, both self-managed and SaaS, have a great user experience. Performance is a critical part of that experience.

Our team works to improve availability, reliability, and performance of the application. We analyze the behavior, recognize bottlenecks, and propose changes. We work to make GitLab a responsive and performant DevOps platform, which offers a great user experience at any scale.

You can check our [direction page](/direction/application_performance/) for more information on our mission, and our short term and long term roadmap.

## Team Members

The following people are permanent members of the Application Performance group:

<%= direct_team(manager_slug: 'pjphillips', role_regexp: /Application Performance|Enablement/) %>

## Stable Counterparts

The following members of other functional teams are our stable counterparts:

<%= stable_counterparts(role_regexp: /Senior Product Manager.*Application Performance|Enablement.*Application Performance/, direct_manager_role: 'Backend Engineering Manager, Application Performance') %>

## Meetings
Where we can we follow the GitLab values and communicate asynchronously.  However, there have a few important recurring meetings.  Please reach out to the [#g_application_performance](https://gitlab.slack.com/messages/CGN8BUCKC) Slack channel if you'd like to be invited.
* Weekly Application Performance group meeting - Mondays 4:00PM UTC
* Application Performance group Office Hours
  * Tuesdays and Fridays at 9:00 UTC

## Work
We follow the GitLab [engineering workflow](/handbook/engineering/workflow/) guidelines.  To bring an issue to our attention please create an issue in the relevant project, or in the [Application Performance team project](https://gitlab.com/gitlab-org/memory-team/team-tasks/issues/new?issue%5Bassignee_id%5D=&issue%5Bmilestone_id%5D=).  Add the `~"group::application performance"` label along with any other relevant labels.  If it is an urgent issue, please reach out to the Product Manager or Engineering Manager listed in the [Stable Counterparts](/handbook/engineering/development/enablement/data_stores/application_performance/#stable-counterparts) section above.

### Planning
When planning for a milestone, the Application Performance group creates a [planning issue](https://gitlab.com/gitlab-org/memory-team/team-tasks/-/blob/master/.gitlab/issue_templates/Planning.md) to discuss the upcoming milestone asynchronously. We outline the major efforts planned for the milestone along with who is working on each effort. Often there are individual issues that are either operational in nature, or don't belong to an epic. These issues are also called out in the planning issue for prioritization.

We have three main boards for tracking our work (listed below). 

#### Boards

[Application Performance by Milestone](https://gitlab.com/groups/gitlab-org/-/boards/1143987?label_name[]=group%3A%3Aapplication%20performance)
The Milestone board gives us a "big picture" view of issues planned in each milestone.

[Application Performance: Build](https://gitlab.com/groups/gitlab-org/-/boards/2333522?label_name[]=application%20performance%3A%3Aactive&label_name[]=group%3A%3Aapplication%20performance)
The build board gives you an overview of the current state of work for `"group::application performance"`. These issues have already gone through validation and are on the [Product Development Build Track](https://about.gitlab.com/handbook/product-development-flow/#build-track). Issues are added to this board by adding the `application_performance::active` and `"group::application performance"` labels. Issues in the `workflow::ready for development` column are ordered in priority order (top down). Team members use this column to select the next item to work on.

[Application Performance: Validation](https://gitlab.com/groups/gitlab-org/-/boards/2334157?label_name[]=application%20performance%3A%3Avalidation&label_name[]=group%3A%3Aapplication%20performance)
The validation board is a queue for incoming issues for the Product Manager to review. A common scenario for the Application Performance group's validation board is when an issue is created that requires further definition before it can be prioritized. The issue typically states a big picture idea but is not yet detailed enough to take action. The Application Performance group will then go through a refinement process to break down the issue into actionable steps, create exit criteria and prioritize against ongoing efforts. If an issue becomes too large, it will be promoted to an epic and small sub-issues will be created.

#### Say/Do Ratio
We use the `~Deliverable` label to track our Say/Do ratio.  At the beginning of each milestone, during an Application Performance group Weekly meeting, we review the issues and determine those issues we are confident we can deliver within the milestone.  The issue will be marked with the `~Deliverable` label.  At the end of the milestone the successfully completed issues with the `~Deliverable` label are tracked in two places.  We have a dashboard in Sisense that will calculate how many were delivered within the mileston and account for issues that were moved.  Additionally, our milestone retro issue lists all of the `~Deliverable` issues shipped along with those that missed the milesone.

### Roadmap
The Application Performance group's [Roadmap](https://gitlab.com/groups/gitlab-org/-/roadmap?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=group%3A%3Aapplication%20performance) gives a view of what is currently in flight as well as projects that have been prioritized for the next 3+ months.

## Links

### Knowledge sharing and lessons learned

 * [Application Performance group's Approach](./approach.html)
 * [Application Performance group's Knowledge Sharing](./knowledge.html)

#### Blog posts
 
 * [Scaling down: How we shrank image transfers by 93%](https://about.gitlab.com/blog/2020/11/02/scaling-down-how-we-prototyped-an-image-scaler-at-gitlab/)
 * [Ruby 2.7: Understand and debug problems with heap compaction](https://about.gitlab.com/blog/2021/04/28/puma-nakayoshi-fork-and-compaction/)

### More about how we work
 * [Application Performance group's 2020 Recap](./2020.html)
 * [Application Performance group's YouTube playlist](https://www.youtube.com/playlist?list=PL05JrBw4t0Kq_5ZWIHYfbcAYjtXYcEZA3)
 * [Application Performance group's subgroup](https://gitlab.com/gitlab-org/memory-team)
 * [Retrospective page](https://gitlab.com/gl-retrospectives/memory-team)
 * Slack Channel [#g_application_performance](https://gitlab.slack.com/messages/CGN8BUCKC)
 * [Talent skills](/job-families/engineering/backend-engineer/#application-performance) that help the team
 * [Product Development Timeline](/handbook/engineering/workflow/#product-development-timeline)

## Dashboards

<%= partial "handbook/engineering/metrics/partials/_cross_functional_dashboard.erb", locals: { filter_value: "application performance" } %>
