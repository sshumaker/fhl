---
layout: handbook-page-toc
title: Manage Foundations Team
description: The Manage Foundations team is responsible for foundational Frontend work and our Design System Pajamas.
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

<!-- Common Links -->
[engineering workflow]: /handbook/engineering/workflow/
[GitLab]: https://gitlab.com/gitlab-org/gitlab
[GitLab UI]: https://gitlab.com/gitlab-org/gitlab-ui
[Pajamas]: https://gitlab.com/gitlab-org/gitlab-services/design.gitlab.com
[#g_manage_foundations]: https://gitlab.slack.com/archives/C010NAWPRV4

## About

We're the Foundations team and we are part of the [Manage Stage](/handbook/product/categories/#manage-stage).

This page is the shared team page for our Engineers, Product Designers, and Product Manager!

We hope it's a good entry point to learn more about who we are and what we do.

## Team Members

<%= shared_team_members(role_regexps: [/Manager,.+Foundations/, /Designer,.+Foundations/, /Engineer,.+Foundations/]) %>

## What do we work on?

 -  **Design System** ([Direction Page](/direction/manage/foundations/design_system/))

    We are currently focused on integrating our design system, [Pajamas], into the GitLab product.

    We perform an accessibility audit on each component and make sure that our implementations in
    [GitLab UI] and [GitLab] match the desired user experience, guidelines, and visual design.

    The Foundations team does the preparation work necessary so that other Engineers at GitLab
    and members from the wider community can help out with these efforts. 

    **Do you want to contribute?** Please see [this issue for a good entry point](https://gitlab.com/gitlab-org/manage/foundations/team-tasks/-/issues/95).

 - **Navigation & Settings** ([Direction Page](/direction/manage/foundations/navigation_settings/))
 - **GitLab Docs** ([Direction Page](/direction/manage/foundations/gitlab_docs/))

## How do we work?

### Communication

To get in touch with the Foundations team,
it's best to create an issue in the relevant project (typically [GitLab], [Pajamas] or [GitLab UI]) and
add the `~"group::foundations"` label, along with any other appropriate labels.
Then, feel free to ping the relevant Product Manager and/or Engineering Manager.

For more urgent items or if you are unsure who to ask, ping `@gitlab-org/manage/foundations` or use [#g_manage_foundations] on Slack (internal only).

### Capacity Planning

In general, we use the standard GitLab [Product Development Flow](https://about.gitlab.com/handbook/product-development-flow/). Here are some specific workflows we use:

#### Planning Breakdown workflow

1. Any issues that need an engineer to give them a weight are given the label `Next Up` by the PM
   1. Criteria:
      * PM needs a weight and collaboration with engineering to size the effort
      * Often these will be labelled `workflow::planning breakdown` but could appear in other workflows if weighting is a topic of conversation
      * Issue has been checked by Design and has a proposal for moving forward
      * Ideally one or more releases ahead of development
1. On a defined interval (`twice a release`), engineers review unweighted  `Next Up` issues:
   * [Unweighted `Next Up` issues](https://gitlab.com/groups/gitlab-org/-/issues?sort=priority&state=opened&label_name[]=Next+Up&label_name[]=group::foundations&weight=None)
   * [Weighted `Next up` issues](https://gitlab.com/groups/gitlab-org/-/issues?sort=priority&state=opened&label_name[]=Next+Up&label_name[]=group::foundations&weight=Any)
   * [All `Next up` issues](https://gitlab.com/groups/gitlab-org/-/issues?sort=priority&state=opened&label_name[]=group::foundations&label_name[]=Next+Up)
1. Engineering: Write comments and collaborate with Design and Product to understand and get a sense of the complexity of the effort
1. Engineering: Set the weight in the issue based on the agreed-upon weighting
1. Engineering: Notify the PM that it has been weighted in a comment
1. PM: Label the issue `workflow::scheduling` or `workflow::ready for development`, and set its milestone to a specific release, or `Backlog`

#### How we weight issues

We use a Fibonacci scale and in terms of complexity, we use [this table](https://www.scrum.org/resources/blog/practical-fibonacci-beginners-guide-relative-sizing) from Practical Fibonacci.

**Foundations weighting scale:**

- **0 - No effort is required**, or there is some effort required, but there is no business value delivered, so no Points are accumulated for doing the work. An example is a desired behavioral change deriving from the Scrum Retrospective.
- **1 - Extra small.**  Developers feel they understand most requirements and consider it relatively easy, probably the smallest item in the Sprint and mostly likely completed in one day.
- **2 - Small.** A little bit of thought, effort, or problem-solving is required, but the Developers have done this a lot, so they have confidence in the requirements. Or, it sounds extra small, but they want to hedge their bet just a bit.
- **3 - Average.**  Developers have done this a lot; they know what needs to be done. There may be a few extra steps, but that's it. It's doubtful that they will need to research anything.
- **5 - Large.**  This is complex work, or the Developers don't do this very often. Most Developers will need assistance from someone else on the team. This is probably one of the largest items that can be completed within a Sprint.
- **8 - Extra Large.**  This is going to take some time and research and probably more than one developer to complete within two weeks. In addition, Developers need to make several assumptions that increase the risk and could affect getting it Done.
- **13 - Warning!** This is a complex piece of work with a lot of unknowns and requires multiple assumptions to size. It is too much to complete in one Sprint. Instead, split this into multiple items that can be completed independently.
- **21 - Hazard!**  A "21" or "34" reflects too much complexity to be done within one Sprint. It will need to be refined more. The large size also indicates more risk, assumptions, and dependencies involved to complete this item.
- **? - Danger!**  As a Developer, we don't want to do this work the way it is currently written. It is very complex and cannot be completed in the timeframe of an iteration or Sprint. Perhaps the requirements are so fuzzy that it's rife with danger.


## Employee Development

Here are some resources team members can use for employee development:

- [Create Stage Professional Development](/handbook/engineering/development/dev/create/#professional-development)
- [Create Stage Training opportunities](/handbook/engineering/development/dev/create/engineers/training/)
- [GitLab Learning and Development](/handbook/people-group/learning-and-development/)
- [Level Up](https://levelup.gitlab.com/learn/dashboard)

## Metrics

<%= partial "handbook/engineering/metrics/partials/_cross_functional_dashboard.erb", locals: { filter_value: "Foundations" } %>
