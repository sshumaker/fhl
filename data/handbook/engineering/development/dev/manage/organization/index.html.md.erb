---
layout: handbook-page-toc
title: "Organization Group"
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

### Manage:Organization
{: #welcome}

#### What makes us different?

The Organization group is a central piece to the GitLab product! While many groups focus on single area - like the repository view, or the merge request view, this group has a much broader impact on many areas. Because of this, there are some key topics that we keep on our mind more than other groups might:

**Security issues**

As properly showing hierarchy to users - which projects/groups they have access to - is our responsibility, we need to solve any security issue connected to that. We closely watch new security issues and schedule them as quickly as possible based on their [due date](/handbook/security/#due-date-on-security-issues). 
For planning security issues we use [the (filtered) milestone planning issue board](https://gitlab.com/gitlab-org/gitlab/-/boards/3635888?label_name[]=security&label_name[]=group%3A%3Aorganization). We expect all team members to be able to resolve security issues.

**Scale**

Because the hierarchy in GitLab, specifically on GitLab.com, can get complicated - and querying memberships can be an expensive operation, we should always thinking about the scalability of our solutions to make sure we are offering our users optimal experience when using our product. 

### How we work

* In accordance with our [GitLab values](/handbook/values/).
* Transparently: nearly everything is public, we record/livestream meetings whenever possible.
* We get a chance to work on the things we want to work on.
* Everyone can contribute; no silos.
  * The goal is to have product give engineering and design the opportunity to be involved with direction and issue definition from the very beginning.
* We do an optional, asynchronous daily stand-up in our respective group stand-up channels:
  * Manage:Organization [#g_manage_organization_daily](https://gitlab.slack.com/archives/C02J4GTP38A)
* We are using feature flags extensively. Due to the our domain and how vital it is for the GitLab workings, every new major or mid-size change should be feature-flagged. 

#### With our counterparts

You are encouraged to work as closely as needed with stable counterparts. We include quality engineering and application security counterparts prior to a release kickoff and as-needed during code reviews or issue concerns.

Quality engineering is included in our workflow via the [Quad Planning Process](/handbook/engineering/quality/quality-engineering/quad-planning/) and is responsible for bug prioritization during release planning. They are also the DRI when it comes to adding new [end-to-end tests](https://docs.gitlab.com/ee/development/testing_guide/end_to_end/), though anyone can contribute. Here are some examples of when to engage with your counterpart:
- [Seeking Quality's opinion if an MR would introduce flakiness in existing end-to-end tests](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/92333#note_1033648348)
- [You need help deciding the best way to fix a test](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/93467#note_1042495993)
- [Guidance on setting up your local environment to properly test](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/56923#note_541368575)

Application Security will be involved in our security issue workflow and should participate in other feature, bug, or maintenance issues before they are scheduled if we need to notate any concerns or potential risks that we should be aware of. Here are some examples of engaging with your counterpart:
- [If you want to confirm whether something should be kept confidential](https://gitlab.com/internal-handbook/internal-handbook.gitlab.io/-/merge_requests/1110#note_1038994941)
- [Confirming whether or not something is considered a vulnerability](https://gitlab.com/gitlab-org/gitlab/-/issues/364526#note_1041178738)
- [Collaborating on feature proposals to see if they have any security implications](https://gitlab.com/gitlab-org/gitlab/-/issues/227841#note_1025940760)

When working with our Support counterparts on customer issues, you are enouraged to provide as much detail as possible, both on the root cause of the problem and on the proposed technical solution. This is in accordance with our [values](/handbook/values/), and this would benefit everyone in the long term because the next time a similar problem happens, our Support counterparts would be able to pattern match and figure out the root cause of the problem on their own. Here are some examples where the Engineer working with customer issues has provides good context on the root cause and the proposed solution:

- [Providing details around a proposed solution for the problem](https://gitlab.com/gitlab-com/dev-sub-department/section-dev-request-for-help/-/issues/26#note_1169262972)
- [Providing technical details around a commonly occuring error, and how we plan to tackle the problem](https://gitlab.com/gitlab-org/gitlab/-/issues/379023#note_1169293467)

#### Keeping yourself informed

- [Subscribe to these company Slack channels](/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/communication/#read-all-of)
- [Review the `#eng-week-in-review` weekly](/handbook/engineering/#keeping-yourself-informed)
- Other channels of interest are `#team-member-updates`, `#sd_dev_engineering`, `#vp-development`, `#ceo`, `#cto`
- We create a weekly issue to inform the team members about the company or team updates, to share important links or to be informed about the team availability. Creation of the issue is the responsibility of an Engineering Manager, who can use an issue template located in the [Manage/Organization repo](https://gitlab.com/gitlab-org/manage/manage-organization/discussions).
All weekly updates can be found in the project issue list [filtered by weekly update label.](https://gitlab.com/gitlab-org/manage/manage-organization/discussions/-/issues/?first_page_size=20&label_name%5B%5D=weekly%20update&sort=due_date&state=opened)

#### Capacity Planning & Estimation

Prior to release kickoff, the Engineering Manager needs to provide the total teams capacity in weight to the Product Manager. Each engineer on the team starts at a baseline weight of capability and is further reduced in capacity based on planned time off including holidays, company events such as [Family and Friends day](/company/family-and-friends-day/) or a team day, on-call shifts, and so on. The end result is a weight estimate that each engineer is reasonably capable of accomplishing, added up amongst all ~"frontend" engineers and ~"backend" engineers separately, and added to the planning issue.

In order to more accurately understand what work can be planned for a release without exhausting our team members, we provide weight estimations after a preliminary, surface-level investigation. We recognize that estimations may not be precise! However this is key in ensuring that the capacity planning estimate above is not overwhelming to the team.

There are two important factors to consider for an issue weight: volume of work, and complexity.

The volume of work refers to the expected size of the change to the code base. A small change may involve a single change to a single file, while a large change could involve many changes across many files and areas of our code base.

Complexity in practice can be split into two considerations: how well the problem is understood, and the level of problem solving difficulty we expect to encounter.

A well understood and thus low complexity issue is to rename a method that is only called in one location. A poorly understood and thus high complexity issue is to rename a method that exists several layers deep and is called directly and indirectly in many different locations.

A low level of problem solving and thus low complexity issue is to order a membership query by access level. A high level of problem solving and thus high complexity issue is to integrate shared groups into a membership query.

The factors to consider can be summarized like so:

- Volume of work
- Complexity
  - Problem understanding
  - Problem solving difficulty

When estimating development work, please assign an issue the appropriate weight:

| Weight | Description (Engineering) |
| ------ | ------ |
| 1 | The simplest possible change. We are confident there will be no side effects. Negligible complexity. |
| 2 | A simple change (minimal code changes), where we understand all of the requirements. Some small uncertainties exist but we are confident of a solution. |
| 3 | A simple change, but the code footprint is bigger (e.g. lots of different files, or tests affected). There are uncertainties that we will need to work through. |
| 5 or higher | A more complex change that will impact multiple areas of the codebase. There may also be some refactoring involved. Requirements are poorly understood and you feel there are multiple important gaps in understanding. We will need to break this issue into smaller pieces before we can begin a merge request. |

We do not provide estimates greater than 5 without encouraging iteration, splitting the issue, collaborating on what a lower effort MVC might be, or working with our counterparts to understand the unknowns.

#### Planning

We plan in monthly cycles in accordance with our [Product Development Timeline](/handbook/engineering/workflow/#product-development-timeline). While meeting this timeline is flexible, a typical planning cycle is suggested to look like:

* At the beginning of each month, Product should have created [a planning issue](https://gitlab.com/gitlab-org/manage/general-discussion/-/issues/?sort=created_date&state=opened&label_name%5B%5D=Planning%20Issue&label_name%5B%5D=group%3A%3Aorganization&first_page_size=20) for the coming release.
  * This issue should include an initial plan for the release, along with links to boards that represent the proposed work for the milestone.
  * Issues without estimates should be investigated by engineering throughout the month so weighting does not need to happen at once. Issues of particular significance to our stage's strategy should be marked with `direction`.
* By the 12th, all planned issues proposed for the next release should be estimated by engineering (`workflow:ready for development`).
  * The EM should add any issues that have the potential to slip and their new weight estimates. Issues that we are sure will slip should be automatically rescheduled to the upcoming release in advance.
  * After estimation, Product should make any needed adjustments to the proposed scope based on estimates. A synchronous meeting to review the final release scope is recommended. At this stage, any issues that the team is committing to delivering should have the ~Deliverable label applied to them.
  * The EM will then assign those issues to individuals based on their individual capacity, and the release will begin

##### What issues get planned?

Between when the planning issue is created and when it gets finalized, [everyone can contribute](/company/mission/#everyone-can-contribute). [All group members](#group-members) can propose issues to be considered for the upcoming release here. Examples of some things to consider when proposing items would be:
- Issues you have been trying to get prioritized or make time for in your free time
- Performance, Application Limit, Reliability, Security, or Infradev issues
- Bugs that you'd like to see resolved or are starting to pick up in frustration
- Issues that may have been tentatively scheduled to this release already, for example when a security issue gets scheduled to a future milestone

#### During a release

 In general, engineering will follow this workflow label cycle for any ~Deliverable issues in the release:

1. `workflow::ready for development` - work is ready to begin, but has not yet started
1. `workflow::in dev` - we are looking at the issue, and are either actively investigating, have begun development, or have a draft merge request open
1. `workflow::in review` - a merge request has been submitted and reviews have been requested
1. `workflow::verification` - the work has merged, and needs to be verified by the assignee
1. `workflow::complete` - the work has been verified and is complete, issues should be closed at this stage

Issues that were labeles with ~milestone::p1 are the priorities for this milestone. They should be worked immediately during the milestone to ensure they are finished and deployed on time. 

### Working on unscheduled issues

With the combination of our capacity planning (EM) and estimation (IC) processes above, engineers should have free time to work on ~"Stuff that should just work" or other topics that interest them. If an unscheduled issue should really be prioritized, bring it up in a planning issue or ask your manager to reduce your capacity further.

### Additional considerations

<%= partial("handbook/engineering/development/dev/manage/organization_processes.erb") %>
<%= partial("handbook/engineering/development/dev/manage/organization/okr_training_process.erb") %>
<%= partial("handbook/engineering/development/dev/manage/organization/career_development_process.erb") %>

## Meetings

Although we have a bias for asynchronous communication, synchronous meetings are necessary and should adhere to our [communication guidelines](/handbook/communication/#video-calls). We are focusing on one-off, topic specific meetings. 
Please always consider recording these calls and sharing them (or taking notes in a [publicly available document](https://docs.google.com/document/d/1kE8udlwjAiMjZW4p1yARUPNmBgHYReK4Ks5xOJW6Tdw/edit)).

Agenda documents and recordings can be placed in the [shared Google drive](https://drive.google.com/drive/u/0/folders/0ALpc3GhrDkKwUk9PVA) (internal only) as a single source of truth.

Meetings that are not 1:1s or covering confidential topics should be added to the Manage Shared calendar.

All meetings should have an agenda prepared at least 12 hours in advance. If this is not the case, you are not obligated to attend the meeting. Consider meetings canceled if they do not have an agenda by the start time of the meeting.


## Group Members

The following people are permanent members of the group:

<%= stable_counterparts(role_regexp: /Manage.+Organization/) %>

## Dashboards

- [Performance Indicators](https://app.periscopedata.com/app/gitlab/932405/Manage::Workspace-Dashboard)

- For the cross-functional prioritization framework, in the short term, we are aiming to spend at least 50% of our capacity on feature work.
The Organization group needs to be especially cautious with scheduling maintenance work and bug fixes. Since we oversee 214 endpoints, the chance that any user is impacted by a performance issue covered by our group is particularly high.
<%= partial "handbook/engineering/metrics/partials/_cross_functional_dashboard.erb", locals: { filter_value: "Workspace" } %>

## Links and resources
{: #links}

* Error budgets (internal only)
  * [Kibana](https://log.gprd.gitlab.net/goto/f5d819e0-8834-11ec-9dd2-93d354bef8e7) - shows the endpoints which contribute to budget spend
  * [Grafana](https://dashboards.gitlab.net/d/stage-groups-workspace/stage-groups-group-dashboard-manage-workspace?orgId=1)
  * [Sisense](https://app.periscopedata.com/app/gitlab/892223/Error-Budget-Dashboard---Stage-Manage) - shows historical data
<%= partial("handbook/engineering/development/dev/manage/shared_links.erb") %>
* [Milestone retrospectives](https://gitlab.com/gl-retrospectives/manage-stage/organization/-/issues)
* Our Slack channels
  * Manage:Organization [#g_manage_organization](https://gitlab.slack.com/archives/C02AZ7C32N5)
  * Linear Queries [#g_manage_auth_topic_linear_namespaces_queries](https://gitlab.slack.com/archives/C02C507V2PM)
  * Consolidating groups and projects [#f_simplify-groups-and-projects](https://gitlab.slack.com/archives/C014ZJZP0JC)
  * Daily standups [#g_manage_organization_daily](https://gitlab.slack.com/archives/C02J4GTP38A)
