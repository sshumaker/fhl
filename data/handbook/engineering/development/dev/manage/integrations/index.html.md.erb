---
layout: handbook-page-toc
title: Manage Integrations Group
description: The Manage Integrations group is responsible for the Integrations category in the Manage stage.
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## About

The Integrations group is a part of the [Manage Stage](https://about.gitlab.com/handbook/product/categories/#manage-stage).
We support the product with 3rd party integrations, REST APIs and GraphQL foundational code, and Webhooks.

This page covers processes and information specific to the Integrations group. See also the [Integrations direction page](/direction/manage/integrations/)
and the [features we support per category](/handbook/product/categories/features/#manageintegrations-group).

## How to reach us

To get in touch with the Integrations group, it's best to create an
issue in the relevant project (typically [GitLab](https://gitlab.com/gitlab-org/gitlab)) and add the
`~"group::integrations"` label, along with any other appropriate labels. Then,
feel free to ping the relevant Product Manager and/or Engineering Manager.

For more urgent items, feel free to use the Slack Channel (internal): [#g_manage_integrations](https://gitlab.slack.com/archives/g_manage_integrations).

## Backend Group Members

<%= direct_team(manager_role: 'Engineering Manager, Manage:Integrations', role_regexp: /Backend/) %>

## Frontend Group Members

<%= direct_team(manager_role: 'Engineering Manager, Manage:Integrations', role_regexp: /Frontend/) %>

## Stable Counterparts

<%= stable_counterparts(role_regexp: /Manage:Integrations/, direct_manager_role: 'Engineering Manager, Manage:Integrations') %>

## OKRs

Each quarter we have a series of Objectives and Key Results (OKRs) for our
group. To find the current OKRs for this
[quarter](https://about.gitlab.com/handbook/finance/#fiscal-year), check the
[OKR project](https://gitlab.com/gitlab-com/gitlab-OKRs/-/issues/?sort=created_date&state=opened&label_name%5B%5D=group%3A%3Aintegrations&milestone_title=Started&first_page_size=50).


## Metrics

<%= partial("handbook/engineering/development/dev/manage/integrations/metrics.erb") %>

## Work

The Product Manager compiles the list of Deliverable and Stretch issues following
the [product prioritization process](/handbook/product/product-processes/#prioritization),
with input from the team, Engineering Managers, and other stakeholders.
The iteration cycle lasts from the 18th of one month until the 17th of the next,
and is identified by the GitLab version set to be released on the 22nd.

### Collaborating with Counterparts

Engineers are encouraged to work as closely as needed with stable counterparts
including our Product Manager. We should be sure to include documentation, UX,
quality engineering, and application security in the planning process.

Quality engineering is included in our workflow via the [Quad Planning Process](/handbook/engineering/quality/quality-engineering/quad-planning/).

### Milestone Planning

Before starting a milestone, the team coordinates using [planning issues](https://gitlab.com/gitlab-org/manage/integrations/team/-/issues/?label_name%5B%5D=Planning%20Issue).
We follow this process:
- The Product Manager defines the goals of the milestone.
- Engineers comment about the issues they consider relevant for the milestone.
- Engineers complete the slipped issues table with any open Deliverable issues and include an update on the status, context for why the issue is slipping (blocking issues, changes in prioritization), and the expected remaining weight. Slipped or slipping issues should be reported **by the 10th of each month** so the team can prepare and plan for the upcoming milestone.
- The Product Manager and Engineering Manager work together to decide the final list of Deliverables and Stretch issues.
- The Product Manager updates the description with the list of milestone issues and closes the planning issue.

We use [Google Apps Script](https://script.google.com/home/projects/1cH4Hrv03Kf_dlqPyxPdoyxWcV_x2d2u2PKNnGP_YwNjGifjcD4c29GKJ/edit)
to estimate capacity. For more accurate [capacity planning](/handbook/engineering/development/dev/manage/integrations/#capacity-planning),
engineers have to report their time off using PTO by Deel before the beginning
of the milestone.

### What to work on

<%= partial("handbook/engineering/development/dev/manage/integrations/what_to_work_on.erb") %>

### Issue Development Workflow

In general, we use the standard GitLab [engineering workflow](/handbook/engineering/workflow/).

The easiest way for Engineering Managers, Product Managers, and other stakeholders
to get a high-level overview of the status of all issues in the current milestone,
or all issues assigned to a specific person, is through the [Development issue board](https://gitlab.com/groups/gitlab-org/-/boards/1290820?scope=all&label_name[]=group%3A%3Aintegrations),
which has columns for each of the workflow labels.

As owners of the issues assigned to them, engineers are expected to keep the
workflow labels on their issues up to date, either by manually assigning the new
label, or by dragging the issue from one column on the board to the next.

Once an engineer starts working an issue, they mark it with the `workflow::"in
dev"` label as the starting point and continue [updating the issue throughout development](/handbook/engineering/workflow/#updating-issues-throughout-development).
The process primarily follows the guideline:

``` mermaid
graph LR

  classDef workflowLabel fill:#428BCA,color:#fff;

  A(workflow::in dev):::workflowLabel
  B(workflow::in review):::workflowLabel
  C(workflow::verification):::workflowLabel
  F(workflow::complete):::workflowLabel

  A -- Push an MR --> B
  B -- Merged --> C
  C --> D{Works on production?}
  D -- YES --> F
  F --> CLOSE
  D -- NO --> E[New MR]
  E --> A
```

If someone starts working on an issue but it has the same workflow label for a
week, the assignee has to leave a comment explaining the status of the issue.
We should write at least one comment every week that the issue is not moving.

### Issue Boards

The work for the Integrations group can be tracked on the following issue boards:

#### Workflow Boards

Workflow Boards track the workflow progress of issues.

- [BE Workflow Board](https://gitlab.com/groups/gitlab-org/-/boards/1290820?scope=all&utf8=%E2%9C%93&label_name[]=group%3A%3Aintegrations&label_name[]=backend)
- [FE Workflow Board](https://gitlab.com/groups/gitlab-org/-/boards/1290820?scope=all&utf8=%E2%9C%93&label_name[]=group%3A%3Aintegrations&label_name[]=frontend)

#### Team Member Boards

Team Member Boards track `group::integrations` labeled issues by the assigned team member.

- [BE Workflow Board](https://gitlab.com/groups/gitlab-org/-/boards/2168283?scope=all&label_name[]=backend&label_name[]=group%3A%3Aintegrations)
- [FE Workflow Board](https://gitlab.com/groups/gitlab-org/-/boards/2168283?scope=all&label_name[]=frontend&label_name[]=group%3A%3Aintegrations)

#### Deliverable / Stretch Boards

Deliverable / Stretch Board tracks `~Deliverable` and `~Stretch` issues.

- [BE Workflow Board](https://gitlab.com/groups/gitlab-org/-/boards/412126?label_name[]=backend&label_name[]=group%3A%3Aintegrations)
- [FE Workflow Board](https://gitlab.com/groups/gitlab-org/-/boards/412126?label_name[]=frontend&label_name[]=group%3A%3Aintegrations)

#### Important Board

- [Important Board](https://gitlab.com/groups/gitlab-org/-/boards/1438588) tracks important issues: infradev, security, reliability, approaching-SLO, missed-SLO, performance and application limits issues.

### Capacity Planning

<%= partial("handbook/engineering/development/dev/manage/integrations/capacity_planning.erb") %>

### Backlog Refinement

<%= partial("handbook/engineering/development/dev/manage/integrations/backlog_refinement.erb") %>

### Retrospectives

<%= partial("handbook/engineering/development/dev/manage/integrations/retrospectives.erb") %>

## Merge request roulette reviews

<%= partial("handbook/engineering/development/dev/manage/integrations/roulette_reviews.erb") %>

## Monitoring

<%= partial("handbook/engineering/development/dev/manage/integrations/monitoring.erb") %>

## Employee Development

Here are some resources team members can use for employee development:

- [Create stage professional development](/handbook/engineering/development/dev/create/#professional-development)
- [Create stage training opportunities](/handbook/engineering/development/dev/create/engineers/training/)
- [GitLab learning and development](/handbook/people-group/learning-and-development/)
- [Level Up](https://levelup.gitlab.com/learn/dashboard)
- [Integrations career chats](/handbook/engineering/development/dev/manage/integrations/career-chats)
