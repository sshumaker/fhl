---
layout: handbook-page-toc
title: "Import Group"
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

### Manage:Import
{: #welcome}


### How we work

* In accordance with our [GitLab values](/handbook/values/).
* Transparently: nearly everything is public, we record/livestream meetings whenever possible.
* We get a chance to work on the things we want to work on.
* Everyone can contribute; no silos.
  * The goal is to have product give engineering and design the opportunity to be involved with direction and issue definition from the very beginning.
* We do an optional, asynchronous daily stand-up in our respective group stand-up channels:
  * Manage:Import [#g_manage_import_daily](https://gitlab.slack.com/archives/C01099NRZ7B)

#### Prioritization
<%= partial "handbook/engineering/development/dev/manage/prioritization.erb", locals: { filter_value: 'import' } %>

In the short term, we are aiming to spend 40% of our capacity on feature work, 30% on maintenance issues and 30% on bugs.

### Planning

#### Milestone Planning and Timeline

Our team mostly follows the [Product Development Flow]((/handbook/product-development-flow/#workflow-summary) and the [Product Development Timeline](/handbook/engineering/workflow/#product-development-timeline) as our group is dependent on the [GitLab self-managed release cycle](https://about.gitlab.com/upcoming-releases/).

##### Overview

| Phase           | Timeline                    |
|-----------------|--------------------------|
| Breakdown Phase | Continously |
| Planning Phase  | From the 6th to 15th |
| Development Phase   | From the 18th to 17th of Month N+1 |

#### 1. Breakdown Phase (DRI: EM)

The breakdown phase will be used for:
1. Review issue description for understanding and thoroughness
1. Ask questions
1. Break issue into smaller parts
1. Assess whether a single issue will have several iterations
1. Create a first technical plan or invites one engineer to help create it
1. Categorize the issues using these labels: ~"Backend", ~"Documentation", ~"Frontend", ~"UX"

**Timeline**: Planning breakdown happens continuously according to the [refinment process](/handbook/engineering/development/dev/manage/import/index.html#issue-refinement).

**Tasks**:
1. PM: Milestone planning issue gets created.
  We utilize a planning issue to keep our team organized during the planning phase.
1. PM: Moves and orders issues of interest into the `~"workflow::refinement"` list of the [Refinment Board](https://gitlab.com/groups/gitlab-org/-/boards/4175527?label_name%5B%5D=group%3A%3Aimport)
1. PM and EM add `~"ready for next refinement"` to top priority issues every week by Thursday end of day.

1.  Engineering and Product Designer to refine issues with `~"ready for next refinement"` label on [Refinement Board](https://gitlab.com/groups/gitlab-org/-/boards/4175527?label_name%5B%5D=group%3A%3Aimport)
1. Engineering: weight issues
1. Engineering: break down issues by posting a rough technical plan on each issue that has a weight bigger than 2.
1. EM: coordinate with FE & BE work.
1. EM: link related and blocked issues
1. Engineering: communicate which issues are unlikely to ship during the current Milestone

**Definition of done**
1. By the 6th of the month, engineering completes issue refinement for the next upcoming milestone, and the goal is to have between 10 to 12 refined issues with  `~"workflow::Ready for refinement"` label are weighted & have a rough technical plan if weight is above 2.
1. Engineering updates issue label to `~"workflow::ready for development"`, and set weight for each.

#### 2. Planning Phase

**Timeline**: Starts on the 6th, ends on the 15th of the Month

**Tasks**:
1. PM: Orders the `ready for development` issues by priority (by the 8th).
1. Engineering: Capacity planning for Milestone.
1. Engineering: Async review of `ready for development` issues considering total Milestone weight or weight per available Engineer.
1. EM: adds the `~"Deliverable"` label to all relevant issues.
2. PM or EM: assigns the upcoming milestone for all issues with `~"Deliverable"` label.

**Definition of done**:
1. List of issues with Milestone assigned (15th)
  Should match capacity

#### 3. Development Phase:

- **Timeline**: 18th - 17th of Month N+1.
- **Tasks**:
1. PM or EM: reschedules `~"Deliverable"` issues if they will miss.
1. Engineers: work on the milestone issues with `~"Deliverable"` issues as a priority.
1. Engineers: can pick issues that are `~"workflow::ready for development"` and unassigned then label them with `~"workflow::in dev"`.
    Issues get assigned once an engineer starts working on it
1. Engineers: Properly assign `~"workflow::in-review"` and  `~"workflow::verification"` to MRs and Issues
1. Engineers: communicate if `~"Deliverable"` is unlikely to ship during current Milestone
1. Engineers: complete task, merge, verify its been deployed and working, then close issue




Generally speaking, issues are in one of two states:
* Discovery/refinement: we're still answering questions that prevent us from starting development,
* Implementation: an issue is waiting for an engineer to work on it, or is actively being built.

Basecamp thinks about these stages in relation to the [climb and descent of a hill](https://www.feltpresence.com/hills.html).

While individual groups are free to use as many stages in the [Product Development Flow](/handbook/product-development-flow/#workflow-summary) workflow as they find useful, we should be somewhat prescriptive on how issues transition from discovery/refinement to implementation.

##### Backlog management

Backlog management is very challenging, but we try to do so with the use of labels and milestones.

##### Refinement

**The end goal is defined,** where all direct stakeholders says “yes, this is ready for development”. Some issues get there quickly, some require a few passes back and forth to figure out.

The goal is for engineers to have buy-in and feel connected to the roadmap. By having engineering included earlier on, the process can be much more natural and smooth.


We have a weekly refinement process which consists of the following steps:

* By Thursday every week Product Manager and Engineering Manager will add issues to the refinement board and label the 3 most important issues `ready for next refinement`.
* In the following week, engineers, PM and UX will refine these 3 issues in the `ready for next refinement` column over a sync call (Tuesday, 08:30am CET). The discussion should be time-boxed and we aim on spending ~10mins per issue.
* Before the sync call, engineers and UX should familiarize themselves with the `ready for next refinement` issues and bring up any questions in the issue.
    * There will be a DRI for every refinement call.
    * The DRI is responsible for taking notes in our weekly agenda during the call.
    * After the refinement call the DRI updates issues with the relevant information (problems discussed, solution proposal, next steps, etc.)
    * Once an issue is refined and a weight has been added the `workflow::ready for development` label should be added. Also, the `ready for next refinement` label should be removed afterwards. This will automatically add the issue to the build board.
    * At the end of each refinement call the DRI for the next refinement call is selected (volunteers preferred).
* We will be constantly reviewing the process in the monthly retrospective issues and make further adjustments if needed.

##### Breaking down or promoting issues

Depending on the complexity of an issue, it may be necessary to break down or promote issues. A couple sample scenarios may be:

- We need to do discovery on the design, before we do anything else. A "Discovery:" issue may work best here as it helps to contain the design thinking and discussion there, with the end result being transferred over to a "Implementation:" issue. These prefixes also help to organize what type of issue they are, in the case they are linked to parent issues or epics.
- The scope of work is larger than anticipated, and needs to be broken down further, e.g., it currently has a weight higher than 5. It may suit you to then promote said issue to an epic, to break it down into smaller issues to list out the different iterations or phases of work that need to happen to deliver the overall feature that was originally proposed.
- The scope of work is clear, but a bit unwieldy for one issue. It may make sense to keep the given issue as is, to keep the conversation and activity visible to everyone, but create separate child design, backend, or frontend issues to track the more nuanced progress of a given issue.

If none of the above applies, then the issue is probably fine as-is! It's likely then that the weight of this issue is quite low, e.g., 1-2.

##### Managing discussions, information, decisions, and action items in an issue.

As part of [breaking down or promoting issues](#breaking-down-or-promoting-issues), you may find that there are a significant number of threads and comments in a given issue.

It's very important that we make sure any proposal details, pending action items, and decisions are easily visible to any stakeholder coming into an issue. Therefore, it's paramount that the issue description is kept up-to-date, or otherwise broken down or promoted as per the above section.

#### Estimation

<%= partial("handbook/engineering/development/dev/manage/estimation.erb") %>

#### Planning

<%= partial("handbook/engineering/development/dev/manage/planning.erb") %>

#### Working with Security

The Import group has an existing [threat model](https://gitlab.com/gitlab-com/gl-security/appsec/threat-models/-/blob/master/gitlab-org/gitlab/GitLab%20Migration.md) to assist in identifying issues that may have security implications, but there are other considerations.

An [Application Security Review](https://about.gitlab.com/handbook/security/security-engineering/application-security/appsec-reviews.html) should be requested when the issue or MR might have security implications. These include, but aren't limited to, issues or MRs which:
- falls under the threat model
- handles binary files (downloading, decompressing, extracting, moving, deleting)
- modifies or uses file manipulation services
- uses methods from Import/Export `CommandLineUtil`


#### During a release

<%= partial("handbook/engineering/development/dev/manage/release.erb") %>

#### Release posts

<%= partial("handbook/engineering/development/dev/manage/release_posts.erb") %>

#### Proof-of-concept MRs

<%= partial("handbook/engineering/development/dev/manage/pocs.erb") %>

### Working on unscheduled issues

<%= partial("handbook/engineering/development/dev/manage/unscheduled_issues.erb") %>

### Additional considerations

<%= partial("handbook/engineering/development/dev/manage/import_processes.erb") %>


## Meetings

Although we have a bias for asynchronous communication, synchronous meetings are necessary and should adhere to our [communication guidelines](/handbook/communication/#video-calls). Some regular meetings that take place in Manage are:

| Frequency | Meeting                              | DRI         | Possible topics                                                                                        |
|-----------|--------------------------------------|-------------|--------------------------------------------------------------------------------------------------------|
| Weekly    | Group-level meeting                  | Backend Engineering Managers | Ensure current release is on track by walking the board, unblock specific issues                       |
| Monthly   | Planning meetings                    | Product Managers         | See [Planning](/handbook/engineering/development/dev/manage/#planning) section |

For one-off, topic specific meetings, please always consider recording these calls and sharing them.

Agenda documents and recordings can be placed in the [shared Google drive](https://drive.google.com/drive/u/0/folders/0ALpc3GhrDkKwUk9PVA) (internal only) as a single source of truth.

Meetings that are not 1:1s or covering confidential topics should be added to the Manage Shared calendar.

All meetings should have an agenda prepared at least 12 hours in advance. If this is not the case, you are not obligated to attend the meeting. Consider meetings canceled if they do not have an agenda by the start time of the meeting.


## Group Members

The following people are permanent members of the group:

<%= stable_counterparts(role_regexp: /Manage.+Import/) %>

## Dashboards

- [Backend overview](https://app.periscopedata.com/app/gitlab/698723/Manage::Import-Backend-Overview)
- [North star metrics](https://app.periscopedata.com/app/gitlab/661967/Manage:Import-Dashboard)
- Kibana dashboards (Internal only)
  - [Project Import/Export - Overview](https://log.gprd.gitlab.net/app/dashboards#/view/03a11c50-ba46-11ec-b73f-692cc1ae8214)
  - [GitHub Import - Overview](https://log.gprd.gitlab.net/app/dashboards#/view/62965d10-9c0e-11ed-9f43-e3784d7fe3ca)
  - [GitHub Import - Project import debug](https://log.gprd.gitlab.net/app/dashboards#/view/be0fb6d0-9c24-11ed-85ed-e7557b0a598c)

## Links and resources
{: #links}

<%= partial("handbook/engineering/development/dev/manage/shared_links.erb") %>
* [Milestone retrospectives](https://gitlab.com/gl-retrospectives/manage-stage/import/-/issues)
* Our Slack channels
  * Manage:Import [#g_manage_import](https://gitlab.slack.com/messages/CLX7WMSKW)
  * Daily standups [#g_manage_import_daily](https://gitlab.slack.com/archives/C01099NRZ7B)
* Issue boards
  * Import [build board](https://gitlab.com/groups/gitlab-org/-/boards/1459244?milestone_title=Upcoming&label_name%5B%5D=group%3A%3Aimport) and [refinement board](https://gitlab.com/groups/gitlab-org/-/boards/4175527?label_name%5B%5D=group%3A%3Aimport)
* Onboarding videos (GitLab Unfiltered Youtube)
  * [Manage:Import Onboarding - GitLab Migration](https://www.youtube.com/watch?v=vVQ6Ex9fSl8)
  * [Manage:Import Onboarding - Introduction to GitHub Importer](https://www.youtube.com/watch?v=TxHopzXop5s)
  * [Manage:Import Onboarding - File based GitLab Import/Export](https://www.youtube.com/watch?v=A4kdpnbhmcw)
  * [Remote S3 Import Example](https://www.youtube.com/watch?v=I85SXNmiS_k)
