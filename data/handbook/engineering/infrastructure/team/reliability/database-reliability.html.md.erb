---
layout: handbook-page-toc
title: "Reliability:Database Reliability Team"
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

## Mission

The Database Reliability team at GitLab mission is to Build, Run and Own the entire lifecycle of the PostgreSQL database engine for GitLab.com.

The team is focused on owning the reliability, scalability, performance & security of the database engine and it's supporting services.

The team should be seeking to build their services on top of [Reliability::Foundations](/handbook/engineering/infrastructure/team/reliability/foundations.html) services and cloud vendor managed products, where appropriate, to reduce complexity, improve efficiency and deliver new capabilities quicker.

The team uses [Engineering Principals](/handbook/engineering/development/principles/) to guide the decisions it makes for it's services.

The team does not explicitly have any self hosted product responsibilities but we should contribute the lessons we learn running the database engine for GitLab at scale in production  back to the Product, Development & Support teams to improve overall customer experience with GitLab, as well as collaborating with the Support teams when self managed customers encounter complex database engine issues.

## Vision

## Ownership

### Services

Systems and services we are primarily responsible for:
  * PostgreSQL Core
  * PostgreSQL High Availability and Load Balancing (e.g. Patroni, PGBouncer, consul, PostgreSQL Replication etc.)
  * PostgreSQL Disaster Recovery (backup/restore and other techniques)
  * Database Observability (Prometheus instrumentation, workload analysis etc.)
  * Support & troubleshooting of GitLab applications, specifically related to their use of and interaction with the PostgreSQL ecosystem.

Systems or services explicitly not owned by us:

| System name | Description | Owner and supported by | Extra info/Open questions |
|-------------|-------------|------------------------|---------------------------|
| Redis | There are several use cases such as caching, rate-limiting, sidekiq queueing. | [Scalability Group](https://about.gitlab.com/handbook/engineering/infrastructure/team/scalability/) | [Redis Architecture](https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#redis-architecture) |
| Clickhouse |  |  |  |
| Data team systems |          | Data team |                          |
| Self Managed databases|           | Self managed Support |               |

## Performance Indicators

The signals we use to know that we are achieving our mission:
  * Related quarterly OKRs (TBC)
  * Relavent [performance and availability indicators](https://about.gitlab.com/job-families/engineering/infrastructure/database-reliability-engineer/#performance-indicators)

## Team Members

<%= direct_team(manager_slug: 'dcurlewis')%>

## Key Technical Skills

The team is comprised of DBREs with varying levels of expertise in:
  * Supporting PostgreSQL in large production environments.
  * Infrastucture automation and configuration management, using tools such as Chef, Ansible, Terraform, etc.
  * PostgreSQL internals, tuning & optimization, SQL and PL/pgSQL.

## Common Links

* Team backlog: https://gitlab.com/gitlab-com/gl-infra/reliability/-/milestones/95#tab-issues
* Slack channel: [#db_squad](https://gitlab.slack.com/archives/C02K0JTKAHJ)
