---
layout: handbook-page-toc
title: "Test Coverage"
description: "The Quality Department has coverage to support testing particular scenarios."
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

### Offline Airgapped GitLab QA scenario

The Quality Department has a GitLab QA scenario that supports offline or air-gapped testing.
We also have other resources for offline testing.
The [scenario](https://gitlab.com/gitlab-org/gitlab-qa/-/blob/master/lib/gitlab/qa/scenario/test/instance/airgapped.rb) `Test::Instance::Airgapped` is part of [GitLab QA](https://gitlab.com/gitlab-org/gitlab-qa/-/blob/master/docs/what_tests_can_be_run.md#testinstanceairgapped)
test scenarios. It installs and uses `iptables` on the test instance to drop traffic other
than specific ports which allow our test access to the test instance.

#### Test run schedule

This is triggered on the [Nightly build](https://gitlab.com/gitlab-org/quality/pipeline-common/-/blob/master/ci/nightly/qa.gitlab-ci.yml#L181),
where [smoke tests](https://docs.gitlab.com/ee/development/testing_guide/smoke.html) for CE and EE are executed. Results of the Nightly pipeline
can be found in the generated [Allure report](https://gitlab-qa-allure-reports.s3.amazonaws.com/nightly/master/index.html),
where test states such as failures can be filtered on.
Nightly pipelines are visible at the
[Nightly Pipelines](https://gitlab.com/gitlab-org/quality/nightly/-/pipelines?page=1&scope=all&username=gitlab-bot) page (internal only).
The offline airgapped smoke test job names are `ce:airgapped-smoke` and `ee:airgapped-smoke`.
This is one of the [pipelines monitored by the Quality Engineering team](/handbook/engineering/quality/quality-engineering/debugging-qa-test-failures/#qa-test-pipelines) as part of the 
[Quality Department pipeline triage on-call rotation](/handbook/engineering/quality/quality-engineering/oncall-rotation/).

#### Other reference guides

Secure stage has additional testing to test that analyzers can execute in an offline fashion.
More information on [secure tests](https://gitlab.com/gitlab-org/security-products/tests/common/-/blob/master/README.md#known-testing-branches)(internal only).

Otherwise for setting up an offline environment for testing, the [Getting started with an offline GitLab Installation](https://docs.gitlab.com/ee/topics/offline/quick_start_guide.html) guide can be followed.
Instructions for working with secure scanners can be found in the [Offline environments](https://docs.gitlab.com/ee/user/application_security/offline_deployments/) guide.

### GitLab Upgrades

#### GitLab QA upgrade scenarios

The Quality Department has several GitLab QA scenarios that verify different upgrade types:

1. [`Test::Omnibus::UpdateFromPrevious`](https://gitlab.com/gitlab-org/gitlab-qa/-/blob/master/docs/what_tests_can_be_run.md#testomnibusupdatefromprevious-full-image-address-current_version-majorminor)
verifies upgrade from the previous (major or minor) version to the current GitLab version ([scenario code](https://gitlab.com/gitlab-org/gitlab-qa/-/blob/master/lib/gitlab/qa/scenario/test/omnibus/update_from_previous.rb)).
1. [`Test::Omnibus::Upgrade`](https://gitlab.com/gitlab-org/gitlab-qa/-/blob/master/docs/what_tests_can_be_run.md#testomnibusupgrade-cefull-image-address)
checks that GitLab instance can be upgraded from CE to EE ([scenario code](https://gitlab.com/gitlab-org/gitlab-qa/-/blob/master/lib/gitlab/qa/scenario/test/omnibus/upgrade.rb)).
1. [`Test::Omnibus::Update`](https://gitlab.com/gitlab-org/gitlab-qa/-/blob/master/docs/what_tests_can_be_run.md#testomnibusupdate-ceeefull-image-address)
verifies upgrade from the `latest` GitLab docker image to `nightly` ([scenario code](https://gitlab.com/gitlab-org/gitlab-qa/-/blob/master/lib/gitlab/qa/scenario/test/omnibus/update.rb)).

##### Test run schedule

1. `Test::Omnibus::UpdateFromPrevious` scenario is run with `package-and-test` job which executes from a [scheduled pipeline every 2 hours](https://gitlab.com/gitlab-org/gitlab/pipeline_schedules) against GitLab `master`.
Results of the `package-and-test` job can be found in [Allure report](https://gitlab-qa-allure-reports.s3.amazonaws.com/e2e-package-and-test/master/index.html),
where test states such as failures can be filtered on.
  - `package-and-test` jobs can be found on [GitLab `master` scheduled pipelines](https://gitlab.com/gitlab-org/gitlab/-/pipelines?page=1&scope=all&username=gitlab-bot&source=schedule) page (internal only).
The upgrade test job names are `ee:update-major` and `ee:update-minor`.
1. `Test::Omnibus::Upgrade` and `Test::Omnibus::Update` scenarios are run in the [Nightly Pipelines](https://gitlab.com/gitlab-org/quality/nightly/-/pipelines?page=1&scope=all&username=gitlab-bot).
Results of the Nightly pipeline can be found in [Allure report](https://gitlab-qa-allure-reports.s3.amazonaws.com/nightly/master/index.html),
where test states such as failures can be filtered on.
  - Scenario job names are `ce:upgrade` and `ce:update`/`ee:update`.

These pipelines are [monitored by the Quality Engineering team](/handbook/engineering/quality/quality-engineering/debugging-qa-test-failures/#qa-test-pipelines) as part of the
[Quality Department pipeline triage on-call rotation](/handbook/engineering/quality/quality-engineering/oncall-rotation/).

#### Performance environments nightly upgrades

Quality team supports test performance environments listed on [Reference Architecture](https://docs.gitlab.com/ee/administration/reference_architectures/#how-to-interpret-the-results) page.
These environments are built with GitLab Environment Toolkit and are upgraded daily or weekly depending on environment to the latest
nightly image.

Detailed process is described on [Performance and Scalability](https://docs.gitlab.com/ee/administration/reference_architectures/#how-to-interpret-the-results) page.

#### Work in progress

Quality team is working on improving GitLab upgrades coverage and this effort is
tracked in [epic#9201](https://gitlab.com/groups/gitlab-org/-/epics/9201).
