---
layout: handbook-page-toc
title: "Pipeline Execution UX"
description: "A documentation of the practices, objectives, achievements and plans of the Pipeline Execution UX team."
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

## Overview

The [Verify:Pipeline Execution Group](/handbook/engineering/development/ops/verify/pipeline-execution/) is focused on all the functionality with respect to Pipeline Execution, as part of [GitLab Continuous Integration](/stages-devops-lifecycle/continuous-integration/). This UX team is responsible for the following categories:

- **[Continuous Integration](/direction/verify/continuous_integration/)**: Making it easy to run a pipeline is our first focus in this category and this applies to both running a pipeline manually as well as triggering one automatically when submitting a code commit or a merge request. In addition, we want to provide pipeline performance data for faster debugging of a pipeline.
- [**Continuous Integration Scaling**](/direction/verify/continuous_integration_scaling/): In FY23 a top priority for us is [SaaS First](/direction/enablement/#saas-first). In the Verify Stage, this means prioritizing the scale of Continuous Integration and ensuring our users on GitLab.com are leveraging a reliable and available service. We are focused on a goal of 20M builds per day as it represents not only a target to drive our future architecture, but a volume that we expect to achieve within several quarters.
- [**Merge Trains**](/direction/verify/merge_trains/): When merge trains are used, each merge request joins as the last item in that train. Each merge request is processed in order and is added to the merge result of the last successful merge request. The merge request adds its changes, and starts the pipeline immediately under the assumption that everything is going to pass. If the merge request fails, it is kicked out of the train and the next merge request continues the pipeline of the last successful merge result. 

## Pipeline Execution UX Plan

### Vision for categories under Pipeline Execution
- **[Continuous Integration](/direction/verify/continuous_integration/)**: 
  - We are working on [Improving the performance of the pipeline list view](https://gitlab.com/groups/gitlab-org/-/epics/9053).
  - To enable GitLab SaaS users to set CI/CD Minute quotas on projects as self-managed namespace admins can, we are working on the design proposal for [Configure CI/CD Quotas by project](https://gitlab.com/gitlab-org/gitlab/-/issues/357760).
  - The [CI_JOB_TOKEN](https://docs.gitlab.com/ee/ci/jobs/ci_job_token.html) makes it intuitive to access the GitLab API from within jobs to enable advanced automation. To enhance the security of this short lived token we will let project maintainers set which projects can use the token to interact with their project with the [next phase](https://gitlab.com/groups/gitlab-org/-/epics/6546#phase-11-ci_job_token-can-be-used-for-use-cases-like-dependabot-without-worrying-about-tokens-leaking-get-data-about-which-projects) of the CI_JOB_TOKEN workflows epic.

- **[Merge Trains](/direction/verify/merge_trains/)**: For an overview of our plans for Merge Trains, see epic [Merge Trains Vision](https://gitlab.com/groups/gitlab-org/-/epics/5122) 

- **[CI Scaling maturity evaluation plan](https://gitlab.com/groups/gitlab-org/-/epics/8597)** (This epic is confidential) [Planned iterations](https://docs.gitlab.com/ee/architecture/blueprints/ci_data_decay/pipeline_partitioning.html#iterations)


## How we work

### UX and Engineering collaboration

The [Pipeline Execution design tracking epic](https://gitlab.com/groups/gitlab-org/-/epics/5866) and regular syncs are used by the product manager and product designer to keep track of issues that are ready for design, usually aligned to a quarterly theme. 

In Pipeline Execution group, design works ahead of development. Therefore, the issues that are being worked on by the designer get assigned to a milestone only after the design proposal has been added, and the status moved from `workflow::design` to `workflow::planning breakdown`.

We dedicate ~10% of our capacity by weight in each milestone to working on [UX Debt](/handbook/product/ux/performance-indicators/#ux-debt) issues and address them within their SLOs. Read more about the collaboration between UX and engineering on the [Pipeline Execution group page](/handbook/engineering/development/ops/verify/pipeline-execution/#collaboration-with-ux-and-engineering).

### UX Definition of Done (DoD)

We use the [CI/CD UX Definition of Done (DoD)](/handbook/product/ux/stage-group-ux-strategy/ci-cd/#ux-definition-of-done-dod) as a tool for assessing the readiness of an issue and tracking the expected deliverables, objectives, and the approval process. 

### UX Weight

We use the [UX Weight definitions](/handbook/product/ux/product-designer/#ux-weight-definitions) for milestone capacity.

### UX Debt and UI Polish issues

The UX Debt and UI Polish issues for CI are tracked in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/4667). Our goal is to work on a minimum of one of these issues each milestone.

## Cross-stage collaboration

| Issue | Scope | Stage-groups impacted |
|-------|-------|-----------------------|
| [Simplify merge strategies with `Auto merge`](https://gitlab.com/groups/gitlab-org/-/epics/6687) | Merge Widget, Settings Page | `group::source code` `group::code review` |
| [Removing user access to Shared Runners UI](https://gitlab.com/gitlab-org/gitlab/-/issues/35346/) | Admin controls | `group::runner` |
| [Define the runner settings workflow for users with blocked shared runner access](https://gitlab.com/gitlab-org/gitlab/-/issues/350714) | Users with stuck pipeline due to interrupted shared runner access | `group::runner` |
| [Provide a breakdown of jobs for a runner rather than total job count](https://gitlab.com/gitlab-org/gitlab/-/issues/378639) | Runner list view | `group::runner` |
| [MVC: Configure CI/CD Quotas by project](https://gitlab.com/gitlab-org/gitlab/-/issues/357760/) | Settings >> CI/CD | `group::fulfilment` |
| [Configure CI/CD Quotas by project under groups](https://gitlab.com/gitlab-org/gitlab/-/issues/362287) | Settings >> CI/CD | `group::fulfilment` |

### Merge Request Reviews
The development merge requests get assigned to a product designer by the [GitLab Roulette](/handbook/product/ux/product-designer/mr-reviews/#how-to-assign-mr-reviews). We follow the standard guidelines for the [reviewing process and hand-off](/handbook/product/ux/product-designer/mr-reviews/#workload-and-response-times) as well. 

There are areas in Pipeline Executions that can be tricky to setup the test data for reviewing the merge request. Depending on the requirement, we clone projects from the [CI sample projects pool](https://gitlab.com/gitlab-org/ci-sample-projects) on the local GDK ot Gitpod instance and test. 

#### Setting up test data for CI/CD minutes features
Merge requests related to CI/CD minutes and shared runner usage usually require some historical usage data, which can be difficult to set up if it doesn't exist already on the local GDK environment. Below is a video and instructions for how to set that up in under 7 minutes.

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/ym-fU1U-anE" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

#### Instructions
Checkout the branch in the MR and open rails console using `bundle exec rails console`.

**1. Edit CI minutes**

```
ApplicationSetting.current.update(shared_runners_minutes: 400)
project = Project.find(20)
root_namespace = project.root_namespace

namespace_usage = Ci::Minutes::NamespaceMonthlyUsage.find_or_create_current(namespace_id: root_namespace.id)
Ci::Minutes::NamespaceMonthlyUsage.update_counters(namespace_usage, amount_used: 100, shared_runners_duration: 100)

project_usage = Ci::Minutes::ProjectMonthlyUsage.find_or_create_current(project_id: project)
Ci::Minutes::ProjectMonthlyUsage.update_counters(project_usage, amount_used: 100, shared_runners_duration: 100)
```

Type `:wq` to exit the log lines. Do not exit the rails console. 

**2. Add helper method to rails console**

```
def increase_ci_usage(project:, date:, amount_used:, shared_runners_duration:)
  date = date.utc.beginning_of_month

  project_usage = Ci::Minutes::ProjectMonthlyUsage.where(date: date).safe_find_or_create_by(project_id: project.id)
  Ci::Minutes::ProjectMonthlyUsage.update_counters(project_usage, amount_used: amount_used, shared_runners_duration: shared_runners_duration)

  root_namespace = project.root_namespace
  namespace_usage = Ci::Minutes::NamespaceMonthlyUsage.where(date: date).safe_find_or_create_by(namespace_id: root_namespace.id)
  Ci::Minutes::NamespaceMonthlyUsage.update_counters(namespace_usage, amount_used: amount_used, shared_runners_duration: shared_runners_duration)
end
```

**3. Use helper method**

```
increase_ci_usage(project: project, date: 1.month.ago, amount_used: 10, shared_runners_duration: 20)
```
The usage quota page should now reflect the changes data.

If you wish to educate yourself further around the updates realted to this area, watch [this video](https://youtu.be/n0aMc9MFQtU) by our Product Manager, James Heimbuck.



